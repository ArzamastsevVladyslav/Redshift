import { RedshiftClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../RedshiftClient";
import { DescribeHsmConfigurationsMessage, HsmConfigurationMessage } from "../models/models_0";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, MiddlewareStack, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer } from "@aws-sdk/types";
export declare type DescribeHsmConfigurationsCommandInput = DescribeHsmConfigurationsMessage;
export declare type DescribeHsmConfigurationsCommandOutput = HsmConfigurationMessage & __MetadataBearer;
/**
 * <p>Returns information about the specified Amazon Redshift HSM configuration. If no
 *             configuration ID is specified, returns information about all the HSM configurations
 *             owned by your AWS customer account.</p>
 *         <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns
 *             all HSM connections that match any combination of the specified keys and values. For
 *             example, if you have <code>owner</code> and <code>environment</code> for tag keys, and
 *                 <code>admin</code> and <code>test</code> for tag values, all HSM connections that
 *             have any combination of those values are returned.</p>
 *         <p>If both tag keys and values are omitted from the request, HSM connections are
 *             returned regardless of whether they have tag keys or values associated with
 *             them.</p>
 */
export declare class DescribeHsmConfigurationsCommand extends $Command<DescribeHsmConfigurationsCommandInput, DescribeHsmConfigurationsCommandOutput, RedshiftClientResolvedConfig> {
    readonly input: DescribeHsmConfigurationsCommandInput;
    private resolved;
    constructor(input: DescribeHsmConfigurationsCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RedshiftClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeHsmConfigurationsCommandInput, DescribeHsmConfigurationsCommandOutput>;
    private serialize;
    private deserialize;
}
