import { __extends } from "tslib";
import { DescribeClusterSnapshotsMessage, SnapshotMessage } from "../models/models_0";
import { deserializeAws_queryDescribeClusterSnapshotsCommand, serializeAws_queryDescribeClusterSnapshotsCommand, } from "../protocols/Aws_query";
import { getSerdePlugin } from "@aws-sdk/middleware-serde";
import { Command as $Command } from "@aws-sdk/smithy-client";
/**
 * <p>Returns one or more snapshot objects, which contain metadata about your cluster
 *             snapshots. By default, this operation returns information about all snapshots of all
 *             clusters that are owned by you AWS customer account. No information is returned for
 *             snapshots owned by inactive AWS customer accounts.</p>
 *         <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns
 *             all snapshots that match any combination of the specified keys and values. For example,
 *             if you have <code>owner</code> and <code>environment</code> for tag keys, and
 *                 <code>admin</code> and <code>test</code> for tag values, all snapshots that have any
 *             combination of those values are returned. Only snapshots that you own are returned in
 *             the response; shared snapshots are not returned with the tag key and tag value request
 *             parameters.</p>
 *         <p>If both tag keys and values are omitted from the request, snapshots are returned
 *             regardless of whether they have tag keys or values associated with them.</p>
 */
var DescribeClusterSnapshotsCommand = /** @class */ (function (_super) {
    __extends(DescribeClusterSnapshotsCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DescribeClusterSnapshotsCommand(input) {
        var _this = 
        // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        _this.resolved = false;
        return _this;
        // End section: command_constructor
    }
    /**
     * @internal
     */
    DescribeClusterSnapshotsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        if (!this.resolved) {
            this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
            this.resolved = true;
        }
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "RedshiftClient";
        var commandName = "DescribeClusterSnapshotsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: DescribeClusterSnapshotsMessage.filterSensitiveLog,
            outputFilterSensitiveLog: SnapshotMessage.filterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DescribeClusterSnapshotsCommand.prototype.serialize = function (input, context) {
        return serializeAws_queryDescribeClusterSnapshotsCommand(input, context);
    };
    DescribeClusterSnapshotsCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_queryDescribeClusterSnapshotsCommand(output, context);
    };
    return DescribeClusterSnapshotsCommand;
}($Command));
export { DescribeClusterSnapshotsCommand };
//# sourceMappingURL=DescribeClusterSnapshotsCommand.js.map