"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListTablesResponseFilterSensitiveLog = exports.TableMemberFilterSensitiveLog = exports.ListTablesRequestFilterSensitiveLog = exports.ListStatementsResponseFilterSensitiveLog = exports.StatementDataFilterSensitiveLog = exports.ListStatementsRequestFilterSensitiveLog = exports.ListSchemasResponseFilterSensitiveLog = exports.ListSchemasRequestFilterSensitiveLog = exports.ListDatabasesResponseFilterSensitiveLog = exports.ListDatabasesRequestFilterSensitiveLog = exports.GetStatementResultResponseFilterSensitiveLog = exports.GetStatementResultRequestFilterSensitiveLog = exports.FieldFilterSensitiveLog = exports.ExecuteStatementOutputFilterSensitiveLog = exports.ExecuteStatementInputFilterSensitiveLog = exports.DescribeTableResponseFilterSensitiveLog = exports.DescribeTableRequestFilterSensitiveLog = exports.DescribeStatementResponseFilterSensitiveLog = exports.SubStatementDataFilterSensitiveLog = exports.SqlParameterFilterSensitiveLog = exports.DescribeStatementRequestFilterSensitiveLog = exports.ColumnMetadataFilterSensitiveLog = exports.CancelStatementResponseFilterSensitiveLog = exports.CancelStatementRequestFilterSensitiveLog = exports.BatchExecuteStatementOutputFilterSensitiveLog = exports.BatchExecuteStatementInputFilterSensitiveLog = exports.Field = exports.ExecuteStatementException = exports.StatementStatusString = exports.StatusString = exports.ResourceNotFoundException = exports.InternalServerException = exports.DatabaseConnectionException = exports.ValidationException = exports.BatchExecuteStatementException = exports.ActiveStatementsExceededException = void 0;
const RedshiftDataServiceException_1 = require("./RedshiftDataServiceException");
class ActiveStatementsExceededException extends RedshiftDataServiceException_1.RedshiftDataServiceException {
    constructor(opts) {
        super({
            name: "ActiveStatementsExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ActiveStatementsExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ActiveStatementsExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.ActiveStatementsExceededException = ActiveStatementsExceededException;
class BatchExecuteStatementException extends RedshiftDataServiceException_1.RedshiftDataServiceException {
    constructor(opts) {
        super({
            name: "BatchExecuteStatementException",
            $fault: "server",
            ...opts,
        });
        this.name = "BatchExecuteStatementException";
        this.$fault = "server";
        Object.setPrototypeOf(this, BatchExecuteStatementException.prototype);
        this.Message = opts.Message;
        this.StatementId = opts.StatementId;
    }
}
exports.BatchExecuteStatementException = BatchExecuteStatementException;
class ValidationException extends RedshiftDataServiceException_1.RedshiftDataServiceException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
exports.ValidationException = ValidationException;
class DatabaseConnectionException extends RedshiftDataServiceException_1.RedshiftDataServiceException {
    constructor(opts) {
        super({
            name: "DatabaseConnectionException",
            $fault: "server",
            ...opts,
        });
        this.name = "DatabaseConnectionException";
        this.$fault = "server";
        Object.setPrototypeOf(this, DatabaseConnectionException.prototype);
        this.Message = opts.Message;
    }
}
exports.DatabaseConnectionException = DatabaseConnectionException;
class InternalServerException extends RedshiftDataServiceException_1.RedshiftDataServiceException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
exports.InternalServerException = InternalServerException;
class ResourceNotFoundException extends RedshiftDataServiceException_1.RedshiftDataServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
var StatusString;
(function (StatusString) {
    StatusString["ABORTED"] = "ABORTED";
    StatusString["ALL"] = "ALL";
    StatusString["FAILED"] = "FAILED";
    StatusString["FINISHED"] = "FINISHED";
    StatusString["PICKED"] = "PICKED";
    StatusString["STARTED"] = "STARTED";
    StatusString["SUBMITTED"] = "SUBMITTED";
})(StatusString = exports.StatusString || (exports.StatusString = {}));
var StatementStatusString;
(function (StatementStatusString) {
    StatementStatusString["ABORTED"] = "ABORTED";
    StatementStatusString["FAILED"] = "FAILED";
    StatementStatusString["FINISHED"] = "FINISHED";
    StatementStatusString["PICKED"] = "PICKED";
    StatementStatusString["STARTED"] = "STARTED";
    StatementStatusString["SUBMITTED"] = "SUBMITTED";
})(StatementStatusString = exports.StatementStatusString || (exports.StatementStatusString = {}));
class ExecuteStatementException extends RedshiftDataServiceException_1.RedshiftDataServiceException {
    constructor(opts) {
        super({
            name: "ExecuteStatementException",
            $fault: "server",
            ...opts,
        });
        this.name = "ExecuteStatementException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ExecuteStatementException.prototype);
        this.Message = opts.Message;
        this.StatementId = opts.StatementId;
    }
}
exports.ExecuteStatementException = ExecuteStatementException;
var Field;
(function (Field) {
    Field.visit = (value, visitor) => {
        if (value.isNull !== undefined)
            return visitor.isNull(value.isNull);
        if (value.booleanValue !== undefined)
            return visitor.booleanValue(value.booleanValue);
        if (value.longValue !== undefined)
            return visitor.longValue(value.longValue);
        if (value.doubleValue !== undefined)
            return visitor.doubleValue(value.doubleValue);
        if (value.stringValue !== undefined)
            return visitor.stringValue(value.stringValue);
        if (value.blobValue !== undefined)
            return visitor.blobValue(value.blobValue);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(Field = exports.Field || (exports.Field = {}));
const BatchExecuteStatementInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchExecuteStatementInputFilterSensitiveLog = BatchExecuteStatementInputFilterSensitiveLog;
const BatchExecuteStatementOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchExecuteStatementOutputFilterSensitiveLog = BatchExecuteStatementOutputFilterSensitiveLog;
const CancelStatementRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CancelStatementRequestFilterSensitiveLog = CancelStatementRequestFilterSensitiveLog;
const CancelStatementResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CancelStatementResponseFilterSensitiveLog = CancelStatementResponseFilterSensitiveLog;
const ColumnMetadataFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ColumnMetadataFilterSensitiveLog = ColumnMetadataFilterSensitiveLog;
const DescribeStatementRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeStatementRequestFilterSensitiveLog = DescribeStatementRequestFilterSensitiveLog;
const SqlParameterFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SqlParameterFilterSensitiveLog = SqlParameterFilterSensitiveLog;
const SubStatementDataFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SubStatementDataFilterSensitiveLog = SubStatementDataFilterSensitiveLog;
const DescribeStatementResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeStatementResponseFilterSensitiveLog = DescribeStatementResponseFilterSensitiveLog;
const DescribeTableRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeTableRequestFilterSensitiveLog = DescribeTableRequestFilterSensitiveLog;
const DescribeTableResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeTableResponseFilterSensitiveLog = DescribeTableResponseFilterSensitiveLog;
const ExecuteStatementInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ExecuteStatementInputFilterSensitiveLog = ExecuteStatementInputFilterSensitiveLog;
const ExecuteStatementOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ExecuteStatementOutputFilterSensitiveLog = ExecuteStatementOutputFilterSensitiveLog;
const FieldFilterSensitiveLog = (obj) => {
    if (obj.isNull !== undefined)
        return { isNull: obj.isNull };
    if (obj.booleanValue !== undefined)
        return { booleanValue: obj.booleanValue };
    if (obj.longValue !== undefined)
        return { longValue: obj.longValue };
    if (obj.doubleValue !== undefined)
        return { doubleValue: obj.doubleValue };
    if (obj.stringValue !== undefined)
        return { stringValue: obj.stringValue };
    if (obj.blobValue !== undefined)
        return { blobValue: obj.blobValue };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
exports.FieldFilterSensitiveLog = FieldFilterSensitiveLog;
const GetStatementResultRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GetStatementResultRequestFilterSensitiveLog = GetStatementResultRequestFilterSensitiveLog;
const GetStatementResultResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Records && { Records: obj.Records.map((item) => item.map((item) => (0, exports.FieldFilterSensitiveLog)(item))) }),
});
exports.GetStatementResultResponseFilterSensitiveLog = GetStatementResultResponseFilterSensitiveLog;
const ListDatabasesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListDatabasesRequestFilterSensitiveLog = ListDatabasesRequestFilterSensitiveLog;
const ListDatabasesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListDatabasesResponseFilterSensitiveLog = ListDatabasesResponseFilterSensitiveLog;
const ListSchemasRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListSchemasRequestFilterSensitiveLog = ListSchemasRequestFilterSensitiveLog;
const ListSchemasResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListSchemasResponseFilterSensitiveLog = ListSchemasResponseFilterSensitiveLog;
const ListStatementsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListStatementsRequestFilterSensitiveLog = ListStatementsRequestFilterSensitiveLog;
const StatementDataFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.StatementDataFilterSensitiveLog = StatementDataFilterSensitiveLog;
const ListStatementsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListStatementsResponseFilterSensitiveLog = ListStatementsResponseFilterSensitiveLog;
const ListTablesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListTablesRequestFilterSensitiveLog = ListTablesRequestFilterSensitiveLog;
const TableMemberFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TableMemberFilterSensitiveLog = TableMemberFilterSensitiveLog;
const ListTablesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListTablesResponseFilterSensitiveLog = ListTablesResponseFilterSensitiveLog;
