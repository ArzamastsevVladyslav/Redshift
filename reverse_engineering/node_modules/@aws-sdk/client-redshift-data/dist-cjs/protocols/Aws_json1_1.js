"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeAws_json1_1ListTablesCommand = exports.deserializeAws_json1_1ListStatementsCommand = exports.deserializeAws_json1_1ListSchemasCommand = exports.deserializeAws_json1_1ListDatabasesCommand = exports.deserializeAws_json1_1GetStatementResultCommand = exports.deserializeAws_json1_1ExecuteStatementCommand = exports.deserializeAws_json1_1DescribeTableCommand = exports.deserializeAws_json1_1DescribeStatementCommand = exports.deserializeAws_json1_1CancelStatementCommand = exports.deserializeAws_json1_1BatchExecuteStatementCommand = exports.serializeAws_json1_1ListTablesCommand = exports.serializeAws_json1_1ListStatementsCommand = exports.serializeAws_json1_1ListSchemasCommand = exports.serializeAws_json1_1ListDatabasesCommand = exports.serializeAws_json1_1GetStatementResultCommand = exports.serializeAws_json1_1ExecuteStatementCommand = exports.serializeAws_json1_1DescribeTableCommand = exports.serializeAws_json1_1DescribeStatementCommand = exports.serializeAws_json1_1CancelStatementCommand = exports.serializeAws_json1_1BatchExecuteStatementCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const models_0_1 = require("../models/models_0");
const RedshiftDataServiceException_1 = require("../models/RedshiftDataServiceException");
const serializeAws_json1_1BatchExecuteStatementCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftData.BatchExecuteStatement",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1BatchExecuteStatementInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1BatchExecuteStatementCommand = serializeAws_json1_1BatchExecuteStatementCommand;
const serializeAws_json1_1CancelStatementCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftData.CancelStatement",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CancelStatementRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CancelStatementCommand = serializeAws_json1_1CancelStatementCommand;
const serializeAws_json1_1DescribeStatementCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftData.DescribeStatement",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeStatementRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeStatementCommand = serializeAws_json1_1DescribeStatementCommand;
const serializeAws_json1_1DescribeTableCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftData.DescribeTable",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeTableRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeTableCommand = serializeAws_json1_1DescribeTableCommand;
const serializeAws_json1_1ExecuteStatementCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftData.ExecuteStatement",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ExecuteStatementInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ExecuteStatementCommand = serializeAws_json1_1ExecuteStatementCommand;
const serializeAws_json1_1GetStatementResultCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftData.GetStatementResult",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetStatementResultRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetStatementResultCommand = serializeAws_json1_1GetStatementResultCommand;
const serializeAws_json1_1ListDatabasesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftData.ListDatabases",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListDatabasesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListDatabasesCommand = serializeAws_json1_1ListDatabasesCommand;
const serializeAws_json1_1ListSchemasCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftData.ListSchemas",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListSchemasRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListSchemasCommand = serializeAws_json1_1ListSchemasCommand;
const serializeAws_json1_1ListStatementsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftData.ListStatements",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListStatementsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListStatementsCommand = serializeAws_json1_1ListStatementsCommand;
const serializeAws_json1_1ListTablesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftData.ListTables",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTablesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListTablesCommand = serializeAws_json1_1ListTablesCommand;
const deserializeAws_json1_1BatchExecuteStatementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchExecuteStatementCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1BatchExecuteStatementOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1BatchExecuteStatementCommand = deserializeAws_json1_1BatchExecuteStatementCommand;
const deserializeAws_json1_1BatchExecuteStatementCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ActiveStatementsExceededException":
        case "com.amazonaws.redshiftdata#ActiveStatementsExceededException":
            throw await deserializeAws_json1_1ActiveStatementsExceededExceptionResponse(parsedOutput, context);
        case "BatchExecuteStatementException":
        case "com.amazonaws.redshiftdata#BatchExecuteStatementException":
            throw await deserializeAws_json1_1BatchExecuteStatementExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftdata#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftDataServiceException_1.RedshiftDataServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1CancelStatementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CancelStatementCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CancelStatementResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CancelStatementCommand = deserializeAws_json1_1CancelStatementCommand;
const deserializeAws_json1_1CancelStatementCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DatabaseConnectionException":
        case "com.amazonaws.redshiftdata#DatabaseConnectionException":
            throw await deserializeAws_json1_1DatabaseConnectionExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftdata#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftdata#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftdata#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftDataServiceException_1.RedshiftDataServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DescribeStatementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeStatementCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeStatementResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeStatementCommand = deserializeAws_json1_1DescribeStatementCommand;
const deserializeAws_json1_1DescribeStatementCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.redshiftdata#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftdata#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftdata#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftDataServiceException_1.RedshiftDataServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DescribeTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeTableResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeTableCommand = deserializeAws_json1_1DescribeTableCommand;
const deserializeAws_json1_1DescribeTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DatabaseConnectionException":
        case "com.amazonaws.redshiftdata#DatabaseConnectionException":
            throw await deserializeAws_json1_1DatabaseConnectionExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftdata#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftdata#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftDataServiceException_1.RedshiftDataServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ExecuteStatementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ExecuteStatementCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ExecuteStatementOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ExecuteStatementCommand = deserializeAws_json1_1ExecuteStatementCommand;
const deserializeAws_json1_1ExecuteStatementCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ActiveStatementsExceededException":
        case "com.amazonaws.redshiftdata#ActiveStatementsExceededException":
            throw await deserializeAws_json1_1ActiveStatementsExceededExceptionResponse(parsedOutput, context);
        case "ExecuteStatementException":
        case "com.amazonaws.redshiftdata#ExecuteStatementException":
            throw await deserializeAws_json1_1ExecuteStatementExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftdata#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftDataServiceException_1.RedshiftDataServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetStatementResultCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetStatementResultCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetStatementResultResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetStatementResultCommand = deserializeAws_json1_1GetStatementResultCommand;
const deserializeAws_json1_1GetStatementResultCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.redshiftdata#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftdata#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftdata#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftDataServiceException_1.RedshiftDataServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListDatabasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDatabasesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListDatabasesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListDatabasesCommand = deserializeAws_json1_1ListDatabasesCommand;
const deserializeAws_json1_1ListDatabasesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DatabaseConnectionException":
        case "com.amazonaws.redshiftdata#DatabaseConnectionException":
            throw await deserializeAws_json1_1DatabaseConnectionExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftdata#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftdata#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftDataServiceException_1.RedshiftDataServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListSchemasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListSchemasCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListSchemasResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListSchemasCommand = deserializeAws_json1_1ListSchemasCommand;
const deserializeAws_json1_1ListSchemasCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DatabaseConnectionException":
        case "com.amazonaws.redshiftdata#DatabaseConnectionException":
            throw await deserializeAws_json1_1DatabaseConnectionExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftdata#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftdata#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftDataServiceException_1.RedshiftDataServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListStatementsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListStatementsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListStatementsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListStatementsCommand = deserializeAws_json1_1ListStatementsCommand;
const deserializeAws_json1_1ListStatementsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.redshiftdata#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftdata#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftDataServiceException_1.RedshiftDataServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListTablesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTablesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTablesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListTablesCommand = deserializeAws_json1_1ListTablesCommand;
const deserializeAws_json1_1ListTablesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DatabaseConnectionException":
        case "com.amazonaws.redshiftdata#DatabaseConnectionException":
            throw await deserializeAws_json1_1DatabaseConnectionExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftdata#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftdata#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftDataServiceException_1.RedshiftDataServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ActiveStatementsExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ActiveStatementsExceededException(body, context);
    const exception = new models_0_1.ActiveStatementsExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1BatchExecuteStatementExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1BatchExecuteStatementException(body, context);
    const exception = new models_0_1.BatchExecuteStatementException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1DatabaseConnectionExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1DatabaseConnectionException(body, context);
    const exception = new models_0_1.DatabaseConnectionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ExecuteStatementExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ExecuteStatementException(body, context);
    const exception = new models_0_1.ExecuteStatementException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1InternalServerExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InternalServerException(body, context);
    const exception = new models_0_1.InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
    const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ValidationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ValidationException(body, context);
    const exception = new models_0_1.ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const serializeAws_json1_1BatchExecuteStatementInput = (input, context) => {
    return {
        ...(input.ClusterIdentifier != null && { ClusterIdentifier: input.ClusterIdentifier }),
        ...(input.Database != null && { Database: input.Database }),
        ...(input.DbUser != null && { DbUser: input.DbUser }),
        ...(input.SecretArn != null && { SecretArn: input.SecretArn }),
        ...(input.Sqls != null && { Sqls: serializeAws_json1_1SqlList(input.Sqls, context) }),
        ...(input.StatementName != null && { StatementName: input.StatementName }),
        ...(input.WithEvent != null && { WithEvent: input.WithEvent }),
        ...(input.WorkgroupName != null && { WorkgroupName: input.WorkgroupName }),
    };
};
const serializeAws_json1_1CancelStatementRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
    };
};
const serializeAws_json1_1DescribeStatementRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
    };
};
const serializeAws_json1_1DescribeTableRequest = (input, context) => {
    return {
        ...(input.ClusterIdentifier != null && { ClusterIdentifier: input.ClusterIdentifier }),
        ...(input.ConnectedDatabase != null && { ConnectedDatabase: input.ConnectedDatabase }),
        ...(input.Database != null && { Database: input.Database }),
        ...(input.DbUser != null && { DbUser: input.DbUser }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.Schema != null && { Schema: input.Schema }),
        ...(input.SecretArn != null && { SecretArn: input.SecretArn }),
        ...(input.Table != null && { Table: input.Table }),
        ...(input.WorkgroupName != null && { WorkgroupName: input.WorkgroupName }),
    };
};
const serializeAws_json1_1ExecuteStatementInput = (input, context) => {
    return {
        ...(input.ClusterIdentifier != null && { ClusterIdentifier: input.ClusterIdentifier }),
        ...(input.Database != null && { Database: input.Database }),
        ...(input.DbUser != null && { DbUser: input.DbUser }),
        ...(input.Parameters != null && { Parameters: serializeAws_json1_1SqlParametersList(input.Parameters, context) }),
        ...(input.SecretArn != null && { SecretArn: input.SecretArn }),
        ...(input.Sql != null && { Sql: input.Sql }),
        ...(input.StatementName != null && { StatementName: input.StatementName }),
        ...(input.WithEvent != null && { WithEvent: input.WithEvent }),
        ...(input.WorkgroupName != null && { WorkgroupName: input.WorkgroupName }),
    };
};
const serializeAws_json1_1GetStatementResultRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListDatabasesRequest = (input, context) => {
    return {
        ...(input.ClusterIdentifier != null && { ClusterIdentifier: input.ClusterIdentifier }),
        ...(input.Database != null && { Database: input.Database }),
        ...(input.DbUser != null && { DbUser: input.DbUser }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.SecretArn != null && { SecretArn: input.SecretArn }),
        ...(input.WorkgroupName != null && { WorkgroupName: input.WorkgroupName }),
    };
};
const serializeAws_json1_1ListSchemasRequest = (input, context) => {
    return {
        ...(input.ClusterIdentifier != null && { ClusterIdentifier: input.ClusterIdentifier }),
        ...(input.ConnectedDatabase != null && { ConnectedDatabase: input.ConnectedDatabase }),
        ...(input.Database != null && { Database: input.Database }),
        ...(input.DbUser != null && { DbUser: input.DbUser }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.SchemaPattern != null && { SchemaPattern: input.SchemaPattern }),
        ...(input.SecretArn != null && { SecretArn: input.SecretArn }),
        ...(input.WorkgroupName != null && { WorkgroupName: input.WorkgroupName }),
    };
};
const serializeAws_json1_1ListStatementsRequest = (input, context) => {
    return {
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.RoleLevel != null && { RoleLevel: input.RoleLevel }),
        ...(input.StatementName != null && { StatementName: input.StatementName }),
        ...(input.Status != null && { Status: input.Status }),
    };
};
const serializeAws_json1_1ListTablesRequest = (input, context) => {
    return {
        ...(input.ClusterIdentifier != null && { ClusterIdentifier: input.ClusterIdentifier }),
        ...(input.ConnectedDatabase != null && { ConnectedDatabase: input.ConnectedDatabase }),
        ...(input.Database != null && { Database: input.Database }),
        ...(input.DbUser != null && { DbUser: input.DbUser }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.SchemaPattern != null && { SchemaPattern: input.SchemaPattern }),
        ...(input.SecretArn != null && { SecretArn: input.SecretArn }),
        ...(input.TablePattern != null && { TablePattern: input.TablePattern }),
        ...(input.WorkgroupName != null && { WorkgroupName: input.WorkgroupName }),
    };
};
const serializeAws_json1_1SqlList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1SqlParameter = (input, context) => {
    return {
        ...(input.name != null && { name: input.name }),
        ...(input.value != null && { value: input.value }),
    };
};
const serializeAws_json1_1SqlParametersList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1SqlParameter(entry, context);
    });
};
const deserializeAws_json1_1ActiveStatementsExceededException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1BatchExecuteStatementException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        StatementId: (0, smithy_client_1.expectString)(output.StatementId),
    };
};
const deserializeAws_json1_1BatchExecuteStatementOutput = (output, context) => {
    return {
        ClusterIdentifier: (0, smithy_client_1.expectString)(output.ClusterIdentifier),
        CreatedAt: output.CreatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedAt))) : undefined,
        Database: (0, smithy_client_1.expectString)(output.Database),
        DbUser: (0, smithy_client_1.expectString)(output.DbUser),
        Id: (0, smithy_client_1.expectString)(output.Id),
        SecretArn: (0, smithy_client_1.expectString)(output.SecretArn),
        WorkgroupName: (0, smithy_client_1.expectString)(output.WorkgroupName),
    };
};
const deserializeAws_json1_1CancelStatementResponse = (output, context) => {
    return {
        Status: (0, smithy_client_1.expectBoolean)(output.Status),
    };
};
const deserializeAws_json1_1ColumnList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ColumnMetadata(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ColumnMetadata = (output, context) => {
    return {
        columnDefault: (0, smithy_client_1.expectString)(output.columnDefault),
        isCaseSensitive: (0, smithy_client_1.expectBoolean)(output.isCaseSensitive),
        isCurrency: (0, smithy_client_1.expectBoolean)(output.isCurrency),
        isSigned: (0, smithy_client_1.expectBoolean)(output.isSigned),
        label: (0, smithy_client_1.expectString)(output.label),
        length: (0, smithy_client_1.expectInt32)(output.length),
        name: (0, smithy_client_1.expectString)(output.name),
        nullable: (0, smithy_client_1.expectInt32)(output.nullable),
        precision: (0, smithy_client_1.expectInt32)(output.precision),
        scale: (0, smithy_client_1.expectInt32)(output.scale),
        schemaName: (0, smithy_client_1.expectString)(output.schemaName),
        tableName: (0, smithy_client_1.expectString)(output.tableName),
        typeName: (0, smithy_client_1.expectString)(output.typeName),
    };
};
const deserializeAws_json1_1ColumnMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ColumnMetadata(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1DatabaseConnectionException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1DatabaseList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1DescribeStatementResponse = (output, context) => {
    return {
        ClusterIdentifier: (0, smithy_client_1.expectString)(output.ClusterIdentifier),
        CreatedAt: output.CreatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedAt))) : undefined,
        Database: (0, smithy_client_1.expectString)(output.Database),
        DbUser: (0, smithy_client_1.expectString)(output.DbUser),
        Duration: (0, smithy_client_1.expectLong)(output.Duration),
        Error: (0, smithy_client_1.expectString)(output.Error),
        HasResultSet: (0, smithy_client_1.expectBoolean)(output.HasResultSet),
        Id: (0, smithy_client_1.expectString)(output.Id),
        QueryParameters: output.QueryParameters != null
            ? deserializeAws_json1_1SqlParametersList(output.QueryParameters, context)
            : undefined,
        QueryString: (0, smithy_client_1.expectString)(output.QueryString),
        RedshiftPid: (0, smithy_client_1.expectLong)(output.RedshiftPid),
        RedshiftQueryId: (0, smithy_client_1.expectLong)(output.RedshiftQueryId),
        ResultRows: (0, smithy_client_1.expectLong)(output.ResultRows),
        ResultSize: (0, smithy_client_1.expectLong)(output.ResultSize),
        SecretArn: (0, smithy_client_1.expectString)(output.SecretArn),
        Status: (0, smithy_client_1.expectString)(output.Status),
        SubStatements: output.SubStatements != null ? deserializeAws_json1_1SubStatementList(output.SubStatements, context) : undefined,
        UpdatedAt: output.UpdatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.UpdatedAt))) : undefined,
        WorkgroupName: (0, smithy_client_1.expectString)(output.WorkgroupName),
    };
};
const deserializeAws_json1_1DescribeTableResponse = (output, context) => {
    return {
        ColumnList: output.ColumnList != null ? deserializeAws_json1_1ColumnList(output.ColumnList, context) : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        TableName: (0, smithy_client_1.expectString)(output.TableName),
    };
};
const deserializeAws_json1_1ExecuteStatementException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        StatementId: (0, smithy_client_1.expectString)(output.StatementId),
    };
};
const deserializeAws_json1_1ExecuteStatementOutput = (output, context) => {
    return {
        ClusterIdentifier: (0, smithy_client_1.expectString)(output.ClusterIdentifier),
        CreatedAt: output.CreatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedAt))) : undefined,
        Database: (0, smithy_client_1.expectString)(output.Database),
        DbUser: (0, smithy_client_1.expectString)(output.DbUser),
        Id: (0, smithy_client_1.expectString)(output.Id),
        SecretArn: (0, smithy_client_1.expectString)(output.SecretArn),
        WorkgroupName: (0, smithy_client_1.expectString)(output.WorkgroupName),
    };
};
const deserializeAws_json1_1Field = (output, context) => {
    if (output.blobValue != null) {
        return {
            blobValue: context.base64Decoder(output.blobValue),
        };
    }
    if ((0, smithy_client_1.expectBoolean)(output.booleanValue) !== undefined) {
        return { booleanValue: (0, smithy_client_1.expectBoolean)(output.booleanValue) };
    }
    if ((0, smithy_client_1.limitedParseDouble)(output.doubleValue) !== undefined) {
        return { doubleValue: (0, smithy_client_1.limitedParseDouble)(output.doubleValue) };
    }
    if ((0, smithy_client_1.expectBoolean)(output.isNull) !== undefined) {
        return { isNull: (0, smithy_client_1.expectBoolean)(output.isNull) };
    }
    if ((0, smithy_client_1.expectLong)(output.longValue) !== undefined) {
        return { longValue: (0, smithy_client_1.expectLong)(output.longValue) };
    }
    if ((0, smithy_client_1.expectString)(output.stringValue) !== undefined) {
        return { stringValue: (0, smithy_client_1.expectString)(output.stringValue) };
    }
    return { $unknown: Object.entries(output)[0] };
};
const deserializeAws_json1_1FieldList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Field((0, smithy_client_1.expectUnion)(entry), context);
    });
    return retVal;
};
const deserializeAws_json1_1GetStatementResultResponse = (output, context) => {
    return {
        ColumnMetadata: output.ColumnMetadata != null
            ? deserializeAws_json1_1ColumnMetadataList(output.ColumnMetadata, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Records: output.Records != null ? deserializeAws_json1_1SqlRecords(output.Records, context) : undefined,
        TotalNumRows: (0, smithy_client_1.expectLong)(output.TotalNumRows),
    };
};
const deserializeAws_json1_1InternalServerException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1ListDatabasesResponse = (output, context) => {
    return {
        Databases: output.Databases != null ? deserializeAws_json1_1DatabaseList(output.Databases, context) : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_json1_1ListSchemasResponse = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Schemas: output.Schemas != null ? deserializeAws_json1_1SchemaList(output.Schemas, context) : undefined,
    };
};
const deserializeAws_json1_1ListStatementsResponse = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Statements: output.Statements != null ? deserializeAws_json1_1StatementList(output.Statements, context) : undefined,
    };
};
const deserializeAws_json1_1ListTablesResponse = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Tables: output.Tables != null ? deserializeAws_json1_1TableList(output.Tables, context) : undefined,
    };
};
const deserializeAws_json1_1ResourceNotFoundException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId),
    };
};
const deserializeAws_json1_1SchemaList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1SqlParameter = (output, context) => {
    return {
        name: (0, smithy_client_1.expectString)(output.name),
        value: (0, smithy_client_1.expectString)(output.value),
    };
};
const deserializeAws_json1_1SqlParametersList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SqlParameter(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1SqlRecords = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1FieldList(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1StatementData = (output, context) => {
    return {
        CreatedAt: output.CreatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedAt))) : undefined,
        Id: (0, smithy_client_1.expectString)(output.Id),
        IsBatchStatement: (0, smithy_client_1.expectBoolean)(output.IsBatchStatement),
        QueryParameters: output.QueryParameters != null
            ? deserializeAws_json1_1SqlParametersList(output.QueryParameters, context)
            : undefined,
        QueryString: (0, smithy_client_1.expectString)(output.QueryString),
        QueryStrings: output.QueryStrings != null ? deserializeAws_json1_1StatementStringList(output.QueryStrings, context) : undefined,
        SecretArn: (0, smithy_client_1.expectString)(output.SecretArn),
        StatementName: (0, smithy_client_1.expectString)(output.StatementName),
        Status: (0, smithy_client_1.expectString)(output.Status),
        UpdatedAt: output.UpdatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.UpdatedAt))) : undefined,
    };
};
const deserializeAws_json1_1StatementList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1StatementData(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1StatementStringList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1SubStatementData = (output, context) => {
    return {
        CreatedAt: output.CreatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedAt))) : undefined,
        Duration: (0, smithy_client_1.expectLong)(output.Duration),
        Error: (0, smithy_client_1.expectString)(output.Error),
        HasResultSet: (0, smithy_client_1.expectBoolean)(output.HasResultSet),
        Id: (0, smithy_client_1.expectString)(output.Id),
        QueryString: (0, smithy_client_1.expectString)(output.QueryString),
        RedshiftQueryId: (0, smithy_client_1.expectLong)(output.RedshiftQueryId),
        ResultRows: (0, smithy_client_1.expectLong)(output.ResultRows),
        ResultSize: (0, smithy_client_1.expectLong)(output.ResultSize),
        Status: (0, smithy_client_1.expectString)(output.Status),
        UpdatedAt: output.UpdatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.UpdatedAt))) : undefined,
    };
};
const deserializeAws_json1_1SubStatementList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SubStatementData(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1TableList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1TableMember(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1TableMember = (output, context) => {
    return {
        name: (0, smithy_client_1.expectString)(output.name),
        schema: (0, smithy_client_1.expectString)(output.schema),
        type: (0, smithy_client_1.expectString)(output.type),
    };
};
const deserializeAws_json1_1ValidationException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeMetadata = (output) => {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
