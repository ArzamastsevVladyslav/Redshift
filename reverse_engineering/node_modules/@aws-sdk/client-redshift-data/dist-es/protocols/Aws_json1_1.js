import { __assign, __awaiter, __generator } from "tslib";
import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, expectUnion as __expectUnion, limitedParseDouble as __limitedParseDouble, parseEpochTimestamp as __parseEpochTimestamp, throwDefaultError, } from "@aws-sdk/smithy-client";
import { ActiveStatementsExceededException, BatchExecuteStatementException, DatabaseConnectionException, ExecuteStatementException, InternalServerException, ResourceNotFoundException, ValidationException, } from "../models/models_0";
import { RedshiftDataServiceException as __BaseException } from "../models/RedshiftDataServiceException";
export var serializeAws_json1_1BatchExecuteStatementCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "RedshiftData.BatchExecuteStatement",
        };
        body = JSON.stringify(serializeAws_json1_1BatchExecuteStatementInput(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1CancelStatementCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "RedshiftData.CancelStatement",
        };
        body = JSON.stringify(serializeAws_json1_1CancelStatementRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DescribeStatementCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "RedshiftData.DescribeStatement",
        };
        body = JSON.stringify(serializeAws_json1_1DescribeStatementRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DescribeTableCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "RedshiftData.DescribeTable",
        };
        body = JSON.stringify(serializeAws_json1_1DescribeTableRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ExecuteStatementCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "RedshiftData.ExecuteStatement",
        };
        body = JSON.stringify(serializeAws_json1_1ExecuteStatementInput(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetStatementResultCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "RedshiftData.GetStatementResult",
        };
        body = JSON.stringify(serializeAws_json1_1GetStatementResultRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListDatabasesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "RedshiftData.ListDatabases",
        };
        body = JSON.stringify(serializeAws_json1_1ListDatabasesRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListSchemasCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "RedshiftData.ListSchemas",
        };
        body = JSON.stringify(serializeAws_json1_1ListSchemasRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListStatementsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "RedshiftData.ListStatements",
        };
        body = JSON.stringify(serializeAws_json1_1ListStatementsRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListTablesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "RedshiftData.ListTables",
        };
        body = JSON.stringify(serializeAws_json1_1ListTablesRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var deserializeAws_json1_1BatchExecuteStatementCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1BatchExecuteStatementCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1BatchExecuteStatementOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1BatchExecuteStatementCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ActiveStatementsExceededException": return [3, 2];
                    case "com.amazonaws.redshiftdata#ActiveStatementsExceededException": return [3, 2];
                    case "BatchExecuteStatementException": return [3, 4];
                    case "com.amazonaws.redshiftdata#BatchExecuteStatementException": return [3, 4];
                    case "ValidationException": return [3, 6];
                    case "com.amazonaws.redshiftdata#ValidationException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1ActiveStatementsExceededExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1BatchExecuteStatementExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_json1_1CancelStatementCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1CancelStatementCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1CancelStatementResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1CancelStatementCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DatabaseConnectionException": return [3, 2];
                    case "com.amazonaws.redshiftdata#DatabaseConnectionException": return [3, 2];
                    case "InternalServerException": return [3, 4];
                    case "com.amazonaws.redshiftdata#InternalServerException": return [3, 4];
                    case "ResourceNotFoundException": return [3, 6];
                    case "com.amazonaws.redshiftdata#ResourceNotFoundException": return [3, 6];
                    case "ValidationException": return [3, 8];
                    case "com.amazonaws.redshiftdata#ValidationException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1DatabaseConnectionExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_json1_1DescribeStatementCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1DescribeStatementCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1DescribeStatementResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DescribeStatementCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.redshiftdata#InternalServerException": return [3, 2];
                    case "ResourceNotFoundException": return [3, 4];
                    case "com.amazonaws.redshiftdata#ResourceNotFoundException": return [3, 4];
                    case "ValidationException": return [3, 6];
                    case "com.amazonaws.redshiftdata#ValidationException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_json1_1DescribeTableCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1DescribeTableCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1DescribeTableResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DescribeTableCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DatabaseConnectionException": return [3, 2];
                    case "com.amazonaws.redshiftdata#DatabaseConnectionException": return [3, 2];
                    case "InternalServerException": return [3, 4];
                    case "com.amazonaws.redshiftdata#InternalServerException": return [3, 4];
                    case "ValidationException": return [3, 6];
                    case "com.amazonaws.redshiftdata#ValidationException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1DatabaseConnectionExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_json1_1ExecuteStatementCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1ExecuteStatementCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ExecuteStatementOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ExecuteStatementCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ActiveStatementsExceededException": return [3, 2];
                    case "com.amazonaws.redshiftdata#ActiveStatementsExceededException": return [3, 2];
                    case "ExecuteStatementException": return [3, 4];
                    case "com.amazonaws.redshiftdata#ExecuteStatementException": return [3, 4];
                    case "ValidationException": return [3, 6];
                    case "com.amazonaws.redshiftdata#ValidationException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1ActiveStatementsExceededExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1ExecuteStatementExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_json1_1GetStatementResultCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1GetStatementResultCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetStatementResultResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetStatementResultCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.redshiftdata#InternalServerException": return [3, 2];
                    case "ResourceNotFoundException": return [3, 4];
                    case "com.amazonaws.redshiftdata#ResourceNotFoundException": return [3, 4];
                    case "ValidationException": return [3, 6];
                    case "com.amazonaws.redshiftdata#ValidationException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_json1_1ListDatabasesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1ListDatabasesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListDatabasesResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListDatabasesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DatabaseConnectionException": return [3, 2];
                    case "com.amazonaws.redshiftdata#DatabaseConnectionException": return [3, 2];
                    case "InternalServerException": return [3, 4];
                    case "com.amazonaws.redshiftdata#InternalServerException": return [3, 4];
                    case "ValidationException": return [3, 6];
                    case "com.amazonaws.redshiftdata#ValidationException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1DatabaseConnectionExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_json1_1ListSchemasCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1ListSchemasCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListSchemasResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListSchemasCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DatabaseConnectionException": return [3, 2];
                    case "com.amazonaws.redshiftdata#DatabaseConnectionException": return [3, 2];
                    case "InternalServerException": return [3, 4];
                    case "com.amazonaws.redshiftdata#InternalServerException": return [3, 4];
                    case "ValidationException": return [3, 6];
                    case "com.amazonaws.redshiftdata#ValidationException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1DatabaseConnectionExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_json1_1ListStatementsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1ListStatementsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListStatementsResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListStatementsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.redshiftdata#InternalServerException": return [3, 2];
                    case "ValidationException": return [3, 4];
                    case "com.amazonaws.redshiftdata#ValidationException": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_json1_1ListTablesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1ListTablesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListTablesResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListTablesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DatabaseConnectionException": return [3, 2];
                    case "com.amazonaws.redshiftdata#DatabaseConnectionException": return [3, 2];
                    case "InternalServerException": return [3, 4];
                    case "com.amazonaws.redshiftdata#InternalServerException": return [3, 4];
                    case "ValidationException": return [3, 6];
                    case "com.amazonaws.redshiftdata#ValidationException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1DatabaseConnectionExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
var deserializeAws_json1_1ActiveStatementsExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, exception;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ActiveStatementsExceededException(body, context);
        exception = new ActiveStatementsExceededException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, deserialized));
        return [2, __decorateServiceException(exception, body)];
    });
}); };
var deserializeAws_json1_1BatchExecuteStatementExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, exception;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1BatchExecuteStatementException(body, context);
        exception = new BatchExecuteStatementException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, deserialized));
        return [2, __decorateServiceException(exception, body)];
    });
}); };
var deserializeAws_json1_1DatabaseConnectionExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, exception;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1DatabaseConnectionException(body, context);
        exception = new DatabaseConnectionException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, deserialized));
        return [2, __decorateServiceException(exception, body)];
    });
}); };
var deserializeAws_json1_1ExecuteStatementExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, exception;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ExecuteStatementException(body, context);
        exception = new ExecuteStatementException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, deserialized));
        return [2, __decorateServiceException(exception, body)];
    });
}); };
var deserializeAws_json1_1InternalServerExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, exception;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InternalServerException(body, context);
        exception = new InternalServerException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, deserialized));
        return [2, __decorateServiceException(exception, body)];
    });
}); };
var deserializeAws_json1_1ResourceNotFoundExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, exception;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
        exception = new ResourceNotFoundException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, deserialized));
        return [2, __decorateServiceException(exception, body)];
    });
}); };
var deserializeAws_json1_1ValidationExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, exception;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ValidationException(body, context);
        exception = new ValidationException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, deserialized));
        return [2, __decorateServiceException(exception, body)];
    });
}); };
var serializeAws_json1_1BatchExecuteStatementInput = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.ClusterIdentifier != null && { ClusterIdentifier: input.ClusterIdentifier })), (input.Database != null && { Database: input.Database })), (input.DbUser != null && { DbUser: input.DbUser })), (input.SecretArn != null && { SecretArn: input.SecretArn })), (input.Sqls != null && { Sqls: serializeAws_json1_1SqlList(input.Sqls, context) })), (input.StatementName != null && { StatementName: input.StatementName })), (input.WithEvent != null && { WithEvent: input.WithEvent })), (input.WorkgroupName != null && { WorkgroupName: input.WorkgroupName }));
};
var serializeAws_json1_1CancelStatementRequest = function (input, context) {
    return __assign({}, (input.Id != null && { Id: input.Id }));
};
var serializeAws_json1_1DescribeStatementRequest = function (input, context) {
    return __assign({}, (input.Id != null && { Id: input.Id }));
};
var serializeAws_json1_1DescribeTableRequest = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.ClusterIdentifier != null && { ClusterIdentifier: input.ClusterIdentifier })), (input.ConnectedDatabase != null && { ConnectedDatabase: input.ConnectedDatabase })), (input.Database != null && { Database: input.Database })), (input.DbUser != null && { DbUser: input.DbUser })), (input.MaxResults != null && { MaxResults: input.MaxResults })), (input.NextToken != null && { NextToken: input.NextToken })), (input.Schema != null && { Schema: input.Schema })), (input.SecretArn != null && { SecretArn: input.SecretArn })), (input.Table != null && { Table: input.Table })), (input.WorkgroupName != null && { WorkgroupName: input.WorkgroupName }));
};
var serializeAws_json1_1ExecuteStatementInput = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.ClusterIdentifier != null && { ClusterIdentifier: input.ClusterIdentifier })), (input.Database != null && { Database: input.Database })), (input.DbUser != null && { DbUser: input.DbUser })), (input.Parameters != null && { Parameters: serializeAws_json1_1SqlParametersList(input.Parameters, context) })), (input.SecretArn != null && { SecretArn: input.SecretArn })), (input.Sql != null && { Sql: input.Sql })), (input.StatementName != null && { StatementName: input.StatementName })), (input.WithEvent != null && { WithEvent: input.WithEvent })), (input.WorkgroupName != null && { WorkgroupName: input.WorkgroupName }));
};
var serializeAws_json1_1GetStatementResultRequest = function (input, context) {
    return __assign(__assign({}, (input.Id != null && { Id: input.Id })), (input.NextToken != null && { NextToken: input.NextToken }));
};
var serializeAws_json1_1ListDatabasesRequest = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.ClusterIdentifier != null && { ClusterIdentifier: input.ClusterIdentifier })), (input.Database != null && { Database: input.Database })), (input.DbUser != null && { DbUser: input.DbUser })), (input.MaxResults != null && { MaxResults: input.MaxResults })), (input.NextToken != null && { NextToken: input.NextToken })), (input.SecretArn != null && { SecretArn: input.SecretArn })), (input.WorkgroupName != null && { WorkgroupName: input.WorkgroupName }));
};
var serializeAws_json1_1ListSchemasRequest = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.ClusterIdentifier != null && { ClusterIdentifier: input.ClusterIdentifier })), (input.ConnectedDatabase != null && { ConnectedDatabase: input.ConnectedDatabase })), (input.Database != null && { Database: input.Database })), (input.DbUser != null && { DbUser: input.DbUser })), (input.MaxResults != null && { MaxResults: input.MaxResults })), (input.NextToken != null && { NextToken: input.NextToken })), (input.SchemaPattern != null && { SchemaPattern: input.SchemaPattern })), (input.SecretArn != null && { SecretArn: input.SecretArn })), (input.WorkgroupName != null && { WorkgroupName: input.WorkgroupName }));
};
var serializeAws_json1_1ListStatementsRequest = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign({}, (input.MaxResults != null && { MaxResults: input.MaxResults })), (input.NextToken != null && { NextToken: input.NextToken })), (input.RoleLevel != null && { RoleLevel: input.RoleLevel })), (input.StatementName != null && { StatementName: input.StatementName })), (input.Status != null && { Status: input.Status }));
};
var serializeAws_json1_1ListTablesRequest = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.ClusterIdentifier != null && { ClusterIdentifier: input.ClusterIdentifier })), (input.ConnectedDatabase != null && { ConnectedDatabase: input.ConnectedDatabase })), (input.Database != null && { Database: input.Database })), (input.DbUser != null && { DbUser: input.DbUser })), (input.MaxResults != null && { MaxResults: input.MaxResults })), (input.NextToken != null && { NextToken: input.NextToken })), (input.SchemaPattern != null && { SchemaPattern: input.SchemaPattern })), (input.SecretArn != null && { SecretArn: input.SecretArn })), (input.TablePattern != null && { TablePattern: input.TablePattern })), (input.WorkgroupName != null && { WorkgroupName: input.WorkgroupName }));
};
var serializeAws_json1_1SqlList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return entry;
    });
};
var serializeAws_json1_1SqlParameter = function (input, context) {
    return __assign(__assign({}, (input.name != null && { name: input.name })), (input.value != null && { value: input.value }));
};
var serializeAws_json1_1SqlParametersList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return serializeAws_json1_1SqlParameter(entry, context);
    });
};
var deserializeAws_json1_1ActiveStatementsExceededException = function (output, context) {
    return {
        Message: __expectString(output.Message),
    };
};
var deserializeAws_json1_1BatchExecuteStatementException = function (output, context) {
    return {
        Message: __expectString(output.Message),
        StatementId: __expectString(output.StatementId),
    };
};
var deserializeAws_json1_1BatchExecuteStatementOutput = function (output, context) {
    return {
        ClusterIdentifier: __expectString(output.ClusterIdentifier),
        CreatedAt: output.CreatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedAt))) : undefined,
        Database: __expectString(output.Database),
        DbUser: __expectString(output.DbUser),
        Id: __expectString(output.Id),
        SecretArn: __expectString(output.SecretArn),
        WorkgroupName: __expectString(output.WorkgroupName),
    };
};
var deserializeAws_json1_1CancelStatementResponse = function (output, context) {
    return {
        Status: __expectBoolean(output.Status),
    };
};
var deserializeAws_json1_1ColumnList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ColumnMetadata(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1ColumnMetadata = function (output, context) {
    return {
        columnDefault: __expectString(output.columnDefault),
        isCaseSensitive: __expectBoolean(output.isCaseSensitive),
        isCurrency: __expectBoolean(output.isCurrency),
        isSigned: __expectBoolean(output.isSigned),
        label: __expectString(output.label),
        length: __expectInt32(output.length),
        name: __expectString(output.name),
        nullable: __expectInt32(output.nullable),
        precision: __expectInt32(output.precision),
        scale: __expectInt32(output.scale),
        schemaName: __expectString(output.schemaName),
        tableName: __expectString(output.tableName),
        typeName: __expectString(output.typeName),
    };
};
var deserializeAws_json1_1ColumnMetadataList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ColumnMetadata(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1DatabaseConnectionException = function (output, context) {
    return {
        Message: __expectString(output.Message),
    };
};
var deserializeAws_json1_1DatabaseList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
var deserializeAws_json1_1DescribeStatementResponse = function (output, context) {
    return {
        ClusterIdentifier: __expectString(output.ClusterIdentifier),
        CreatedAt: output.CreatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedAt))) : undefined,
        Database: __expectString(output.Database),
        DbUser: __expectString(output.DbUser),
        Duration: __expectLong(output.Duration),
        Error: __expectString(output.Error),
        HasResultSet: __expectBoolean(output.HasResultSet),
        Id: __expectString(output.Id),
        QueryParameters: output.QueryParameters != null
            ? deserializeAws_json1_1SqlParametersList(output.QueryParameters, context)
            : undefined,
        QueryString: __expectString(output.QueryString),
        RedshiftPid: __expectLong(output.RedshiftPid),
        RedshiftQueryId: __expectLong(output.RedshiftQueryId),
        ResultRows: __expectLong(output.ResultRows),
        ResultSize: __expectLong(output.ResultSize),
        SecretArn: __expectString(output.SecretArn),
        Status: __expectString(output.Status),
        SubStatements: output.SubStatements != null ? deserializeAws_json1_1SubStatementList(output.SubStatements, context) : undefined,
        UpdatedAt: output.UpdatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.UpdatedAt))) : undefined,
        WorkgroupName: __expectString(output.WorkgroupName),
    };
};
var deserializeAws_json1_1DescribeTableResponse = function (output, context) {
    return {
        ColumnList: output.ColumnList != null ? deserializeAws_json1_1ColumnList(output.ColumnList, context) : undefined,
        NextToken: __expectString(output.NextToken),
        TableName: __expectString(output.TableName),
    };
};
var deserializeAws_json1_1ExecuteStatementException = function (output, context) {
    return {
        Message: __expectString(output.Message),
        StatementId: __expectString(output.StatementId),
    };
};
var deserializeAws_json1_1ExecuteStatementOutput = function (output, context) {
    return {
        ClusterIdentifier: __expectString(output.ClusterIdentifier),
        CreatedAt: output.CreatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedAt))) : undefined,
        Database: __expectString(output.Database),
        DbUser: __expectString(output.DbUser),
        Id: __expectString(output.Id),
        SecretArn: __expectString(output.SecretArn),
        WorkgroupName: __expectString(output.WorkgroupName),
    };
};
var deserializeAws_json1_1Field = function (output, context) {
    if (output.blobValue != null) {
        return {
            blobValue: context.base64Decoder(output.blobValue),
        };
    }
    if (__expectBoolean(output.booleanValue) !== undefined) {
        return { booleanValue: __expectBoolean(output.booleanValue) };
    }
    if (__limitedParseDouble(output.doubleValue) !== undefined) {
        return { doubleValue: __limitedParseDouble(output.doubleValue) };
    }
    if (__expectBoolean(output.isNull) !== undefined) {
        return { isNull: __expectBoolean(output.isNull) };
    }
    if (__expectLong(output.longValue) !== undefined) {
        return { longValue: __expectLong(output.longValue) };
    }
    if (__expectString(output.stringValue) !== undefined) {
        return { stringValue: __expectString(output.stringValue) };
    }
    return { $unknown: Object.entries(output)[0] };
};
var deserializeAws_json1_1FieldList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Field(__expectUnion(entry), context);
    });
    return retVal;
};
var deserializeAws_json1_1GetStatementResultResponse = function (output, context) {
    return {
        ColumnMetadata: output.ColumnMetadata != null
            ? deserializeAws_json1_1ColumnMetadataList(output.ColumnMetadata, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
        Records: output.Records != null ? deserializeAws_json1_1SqlRecords(output.Records, context) : undefined,
        TotalNumRows: __expectLong(output.TotalNumRows),
    };
};
var deserializeAws_json1_1InternalServerException = function (output, context) {
    return {
        Message: __expectString(output.Message),
    };
};
var deserializeAws_json1_1ListDatabasesResponse = function (output, context) {
    return {
        Databases: output.Databases != null ? deserializeAws_json1_1DatabaseList(output.Databases, context) : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
var deserializeAws_json1_1ListSchemasResponse = function (output, context) {
    return {
        NextToken: __expectString(output.NextToken),
        Schemas: output.Schemas != null ? deserializeAws_json1_1SchemaList(output.Schemas, context) : undefined,
    };
};
var deserializeAws_json1_1ListStatementsResponse = function (output, context) {
    return {
        NextToken: __expectString(output.NextToken),
        Statements: output.Statements != null ? deserializeAws_json1_1StatementList(output.Statements, context) : undefined,
    };
};
var deserializeAws_json1_1ListTablesResponse = function (output, context) {
    return {
        NextToken: __expectString(output.NextToken),
        Tables: output.Tables != null ? deserializeAws_json1_1TableList(output.Tables, context) : undefined,
    };
};
var deserializeAws_json1_1ResourceNotFoundException = function (output, context) {
    return {
        Message: __expectString(output.Message),
        ResourceId: __expectString(output.ResourceId),
    };
};
var deserializeAws_json1_1SchemaList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
var deserializeAws_json1_1SqlParameter = function (output, context) {
    return {
        name: __expectString(output.name),
        value: __expectString(output.value),
    };
};
var deserializeAws_json1_1SqlParametersList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SqlParameter(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1SqlRecords = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1FieldList(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1StatementData = function (output, context) {
    return {
        CreatedAt: output.CreatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedAt))) : undefined,
        Id: __expectString(output.Id),
        IsBatchStatement: __expectBoolean(output.IsBatchStatement),
        QueryParameters: output.QueryParameters != null
            ? deserializeAws_json1_1SqlParametersList(output.QueryParameters, context)
            : undefined,
        QueryString: __expectString(output.QueryString),
        QueryStrings: output.QueryStrings != null ? deserializeAws_json1_1StatementStringList(output.QueryStrings, context) : undefined,
        SecretArn: __expectString(output.SecretArn),
        StatementName: __expectString(output.StatementName),
        Status: __expectString(output.Status),
        UpdatedAt: output.UpdatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.UpdatedAt))) : undefined,
    };
};
var deserializeAws_json1_1StatementList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1StatementData(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1StatementStringList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
var deserializeAws_json1_1SubStatementData = function (output, context) {
    return {
        CreatedAt: output.CreatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedAt))) : undefined,
        Duration: __expectLong(output.Duration),
        Error: __expectString(output.Error),
        HasResultSet: __expectBoolean(output.HasResultSet),
        Id: __expectString(output.Id),
        QueryString: __expectString(output.QueryString),
        RedshiftQueryId: __expectLong(output.RedshiftQueryId),
        ResultRows: __expectLong(output.ResultRows),
        ResultSize: __expectLong(output.ResultSize),
        Status: __expectString(output.Status),
        UpdatedAt: output.UpdatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.UpdatedAt))) : undefined,
    };
};
var deserializeAws_json1_1SubStatementList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SubStatementData(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1TableList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1TableMember(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1TableMember = function (output, context) {
    return {
        name: __expectString(output.name),
        schema: __expectString(output.schema),
        type: __expectString(output.type),
    };
};
var deserializeAws_json1_1ValidationException = function (output, context) {
    return {
        Message: __expectString(output.Message),
    };
};
var deserializeMetadata = function (output) {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
var collectBody = function (streamBody, context) {
    if (streamBody === void 0) { streamBody = new Uint8Array(); }
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) { return context.utf8Encoder(body); });
};
var buildHttpRpcRequest = function (context, headers, path, resolvedHostname, body) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                contents = {
                    protocol: protocol,
                    hostname: hostname,
                    port: port,
                    method: "POST",
                    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
                    headers: headers,
                };
                if (resolvedHostname !== undefined) {
                    contents.hostname = resolvedHostname;
                }
                if (body !== undefined) {
                    contents.body = body;
                }
                return [2, new __HttpRequest(contents)];
        }
    });
}); };
var parseBody = function (streamBody, context) {
    return collectBodyString(streamBody, context).then(function (encoded) {
        if (encoded.length) {
            return JSON.parse(encoded);
        }
        return {};
    });
};
var loadRestJsonErrorCode = function (output, data) {
    var findKey = function (object, key) { return Object.keys(object).find(function (k) { return k.toLowerCase() === key.toLowerCase(); }); };
    var sanitizeErrorCode = function (rawValue) {
        var cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    var headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
