import { __assign, __extends } from "tslib";
import { RedshiftDataServiceException as __BaseException } from "./RedshiftDataServiceException";
var ActiveStatementsExceededException = (function (_super) {
    __extends(ActiveStatementsExceededException, _super);
    function ActiveStatementsExceededException(opts) {
        var _this = _super.call(this, __assign({ name: "ActiveStatementsExceededException", $fault: "client" }, opts)) || this;
        _this.name = "ActiveStatementsExceededException";
        _this.$fault = "client";
        Object.setPrototypeOf(_this, ActiveStatementsExceededException.prototype);
        _this.Message = opts.Message;
        return _this;
    }
    return ActiveStatementsExceededException;
}(__BaseException));
export { ActiveStatementsExceededException };
var BatchExecuteStatementException = (function (_super) {
    __extends(BatchExecuteStatementException, _super);
    function BatchExecuteStatementException(opts) {
        var _this = _super.call(this, __assign({ name: "BatchExecuteStatementException", $fault: "server" }, opts)) || this;
        _this.name = "BatchExecuteStatementException";
        _this.$fault = "server";
        Object.setPrototypeOf(_this, BatchExecuteStatementException.prototype);
        _this.Message = opts.Message;
        _this.StatementId = opts.StatementId;
        return _this;
    }
    return BatchExecuteStatementException;
}(__BaseException));
export { BatchExecuteStatementException };
var ValidationException = (function (_super) {
    __extends(ValidationException, _super);
    function ValidationException(opts) {
        var _this = _super.call(this, __assign({ name: "ValidationException", $fault: "client" }, opts)) || this;
        _this.name = "ValidationException";
        _this.$fault = "client";
        Object.setPrototypeOf(_this, ValidationException.prototype);
        _this.Message = opts.Message;
        return _this;
    }
    return ValidationException;
}(__BaseException));
export { ValidationException };
var DatabaseConnectionException = (function (_super) {
    __extends(DatabaseConnectionException, _super);
    function DatabaseConnectionException(opts) {
        var _this = _super.call(this, __assign({ name: "DatabaseConnectionException", $fault: "server" }, opts)) || this;
        _this.name = "DatabaseConnectionException";
        _this.$fault = "server";
        Object.setPrototypeOf(_this, DatabaseConnectionException.prototype);
        _this.Message = opts.Message;
        return _this;
    }
    return DatabaseConnectionException;
}(__BaseException));
export { DatabaseConnectionException };
var InternalServerException = (function (_super) {
    __extends(InternalServerException, _super);
    function InternalServerException(opts) {
        var _this = _super.call(this, __assign({ name: "InternalServerException", $fault: "server" }, opts)) || this;
        _this.name = "InternalServerException";
        _this.$fault = "server";
        Object.setPrototypeOf(_this, InternalServerException.prototype);
        _this.Message = opts.Message;
        return _this;
    }
    return InternalServerException;
}(__BaseException));
export { InternalServerException };
var ResourceNotFoundException = (function (_super) {
    __extends(ResourceNotFoundException, _super);
    function ResourceNotFoundException(opts) {
        var _this = _super.call(this, __assign({ name: "ResourceNotFoundException", $fault: "client" }, opts)) || this;
        _this.name = "ResourceNotFoundException";
        _this.$fault = "client";
        Object.setPrototypeOf(_this, ResourceNotFoundException.prototype);
        _this.Message = opts.Message;
        _this.ResourceId = opts.ResourceId;
        return _this;
    }
    return ResourceNotFoundException;
}(__BaseException));
export { ResourceNotFoundException };
export var StatusString;
(function (StatusString) {
    StatusString["ABORTED"] = "ABORTED";
    StatusString["ALL"] = "ALL";
    StatusString["FAILED"] = "FAILED";
    StatusString["FINISHED"] = "FINISHED";
    StatusString["PICKED"] = "PICKED";
    StatusString["STARTED"] = "STARTED";
    StatusString["SUBMITTED"] = "SUBMITTED";
})(StatusString || (StatusString = {}));
export var StatementStatusString;
(function (StatementStatusString) {
    StatementStatusString["ABORTED"] = "ABORTED";
    StatementStatusString["FAILED"] = "FAILED";
    StatementStatusString["FINISHED"] = "FINISHED";
    StatementStatusString["PICKED"] = "PICKED";
    StatementStatusString["STARTED"] = "STARTED";
    StatementStatusString["SUBMITTED"] = "SUBMITTED";
})(StatementStatusString || (StatementStatusString = {}));
var ExecuteStatementException = (function (_super) {
    __extends(ExecuteStatementException, _super);
    function ExecuteStatementException(opts) {
        var _this = _super.call(this, __assign({ name: "ExecuteStatementException", $fault: "server" }, opts)) || this;
        _this.name = "ExecuteStatementException";
        _this.$fault = "server";
        Object.setPrototypeOf(_this, ExecuteStatementException.prototype);
        _this.Message = opts.Message;
        _this.StatementId = opts.StatementId;
        return _this;
    }
    return ExecuteStatementException;
}(__BaseException));
export { ExecuteStatementException };
export var Field;
(function (Field) {
    Field.visit = function (value, visitor) {
        if (value.isNull !== undefined)
            return visitor.isNull(value.isNull);
        if (value.booleanValue !== undefined)
            return visitor.booleanValue(value.booleanValue);
        if (value.longValue !== undefined)
            return visitor.longValue(value.longValue);
        if (value.doubleValue !== undefined)
            return visitor.doubleValue(value.doubleValue);
        if (value.stringValue !== undefined)
            return visitor.stringValue(value.stringValue);
        if (value.blobValue !== undefined)
            return visitor.blobValue(value.blobValue);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(Field || (Field = {}));
export var BatchExecuteStatementInputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var BatchExecuteStatementOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var CancelStatementRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var CancelStatementResponseFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var ColumnMetadataFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var DescribeStatementRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var SqlParameterFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var SubStatementDataFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var DescribeStatementResponseFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var DescribeTableRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var DescribeTableResponseFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var ExecuteStatementInputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var ExecuteStatementOutputFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var FieldFilterSensitiveLog = function (obj) {
    var _a;
    if (obj.isNull !== undefined)
        return { isNull: obj.isNull };
    if (obj.booleanValue !== undefined)
        return { booleanValue: obj.booleanValue };
    if (obj.longValue !== undefined)
        return { longValue: obj.longValue };
    if (obj.doubleValue !== undefined)
        return { doubleValue: obj.doubleValue };
    if (obj.stringValue !== undefined)
        return { stringValue: obj.stringValue };
    if (obj.blobValue !== undefined)
        return { blobValue: obj.blobValue };
    if (obj.$unknown !== undefined)
        return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
};
export var GetStatementResultRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var GetStatementResultResponseFilterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.Records && { Records: obj.Records.map(function (item) { return item.map(function (item) { return FieldFilterSensitiveLog(item); }); }) }))); };
export var ListDatabasesRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var ListDatabasesResponseFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var ListSchemasRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var ListSchemasResponseFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var ListStatementsRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var StatementDataFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var ListStatementsResponseFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var ListTablesRequestFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var TableMemberFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
export var ListTablesResponseFilterSensitiveLog = function (obj) { return (__assign({}, obj)); };
