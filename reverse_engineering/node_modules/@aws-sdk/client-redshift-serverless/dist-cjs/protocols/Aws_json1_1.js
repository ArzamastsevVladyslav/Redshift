"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeAws_json1_1GetCredentialsCommand = exports.deserializeAws_json1_1DeleteWorkgroupCommand = exports.deserializeAws_json1_1DeleteUsageLimitCommand = exports.deserializeAws_json1_1DeleteSnapshotCommand = exports.deserializeAws_json1_1DeleteResourcePolicyCommand = exports.deserializeAws_json1_1DeleteNamespaceCommand = exports.deserializeAws_json1_1DeleteEndpointAccessCommand = exports.deserializeAws_json1_1CreateWorkgroupCommand = exports.deserializeAws_json1_1CreateUsageLimitCommand = exports.deserializeAws_json1_1CreateSnapshotCommand = exports.deserializeAws_json1_1CreateNamespaceCommand = exports.deserializeAws_json1_1CreateEndpointAccessCommand = exports.deserializeAws_json1_1ConvertRecoveryPointToSnapshotCommand = exports.serializeAws_json1_1UpdateWorkgroupCommand = exports.serializeAws_json1_1UpdateUsageLimitCommand = exports.serializeAws_json1_1UpdateSnapshotCommand = exports.serializeAws_json1_1UpdateNamespaceCommand = exports.serializeAws_json1_1UpdateEndpointAccessCommand = exports.serializeAws_json1_1UntagResourceCommand = exports.serializeAws_json1_1TagResourceCommand = exports.serializeAws_json1_1RestoreFromSnapshotCommand = exports.serializeAws_json1_1RestoreFromRecoveryPointCommand = exports.serializeAws_json1_1PutResourcePolicyCommand = exports.serializeAws_json1_1ListWorkgroupsCommand = exports.serializeAws_json1_1ListUsageLimitsCommand = exports.serializeAws_json1_1ListTagsForResourceCommand = exports.serializeAws_json1_1ListSnapshotsCommand = exports.serializeAws_json1_1ListRecoveryPointsCommand = exports.serializeAws_json1_1ListNamespacesCommand = exports.serializeAws_json1_1ListEndpointAccessCommand = exports.serializeAws_json1_1GetWorkgroupCommand = exports.serializeAws_json1_1GetUsageLimitCommand = exports.serializeAws_json1_1GetSnapshotCommand = exports.serializeAws_json1_1GetResourcePolicyCommand = exports.serializeAws_json1_1GetRecoveryPointCommand = exports.serializeAws_json1_1GetNamespaceCommand = exports.serializeAws_json1_1GetEndpointAccessCommand = exports.serializeAws_json1_1GetCredentialsCommand = exports.serializeAws_json1_1DeleteWorkgroupCommand = exports.serializeAws_json1_1DeleteUsageLimitCommand = exports.serializeAws_json1_1DeleteSnapshotCommand = exports.serializeAws_json1_1DeleteResourcePolicyCommand = exports.serializeAws_json1_1DeleteNamespaceCommand = exports.serializeAws_json1_1DeleteEndpointAccessCommand = exports.serializeAws_json1_1CreateWorkgroupCommand = exports.serializeAws_json1_1CreateUsageLimitCommand = exports.serializeAws_json1_1CreateSnapshotCommand = exports.serializeAws_json1_1CreateNamespaceCommand = exports.serializeAws_json1_1CreateEndpointAccessCommand = exports.serializeAws_json1_1ConvertRecoveryPointToSnapshotCommand = void 0;
exports.deserializeAws_json1_1UpdateWorkgroupCommand = exports.deserializeAws_json1_1UpdateUsageLimitCommand = exports.deserializeAws_json1_1UpdateSnapshotCommand = exports.deserializeAws_json1_1UpdateNamespaceCommand = exports.deserializeAws_json1_1UpdateEndpointAccessCommand = exports.deserializeAws_json1_1UntagResourceCommand = exports.deserializeAws_json1_1TagResourceCommand = exports.deserializeAws_json1_1RestoreFromSnapshotCommand = exports.deserializeAws_json1_1RestoreFromRecoveryPointCommand = exports.deserializeAws_json1_1PutResourcePolicyCommand = exports.deserializeAws_json1_1ListWorkgroupsCommand = exports.deserializeAws_json1_1ListUsageLimitsCommand = exports.deserializeAws_json1_1ListTagsForResourceCommand = exports.deserializeAws_json1_1ListSnapshotsCommand = exports.deserializeAws_json1_1ListRecoveryPointsCommand = exports.deserializeAws_json1_1ListNamespacesCommand = exports.deserializeAws_json1_1ListEndpointAccessCommand = exports.deserializeAws_json1_1GetWorkgroupCommand = exports.deserializeAws_json1_1GetUsageLimitCommand = exports.deserializeAws_json1_1GetSnapshotCommand = exports.deserializeAws_json1_1GetResourcePolicyCommand = exports.deserializeAws_json1_1GetRecoveryPointCommand = exports.deserializeAws_json1_1GetNamespaceCommand = exports.deserializeAws_json1_1GetEndpointAccessCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const models_0_1 = require("../models/models_0");
const RedshiftServerlessServiceException_1 = require("../models/RedshiftServerlessServiceException");
const serializeAws_json1_1ConvertRecoveryPointToSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.ConvertRecoveryPointToSnapshot",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ConvertRecoveryPointToSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ConvertRecoveryPointToSnapshotCommand = serializeAws_json1_1ConvertRecoveryPointToSnapshotCommand;
const serializeAws_json1_1CreateEndpointAccessCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.CreateEndpointAccess",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateEndpointAccessRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateEndpointAccessCommand = serializeAws_json1_1CreateEndpointAccessCommand;
const serializeAws_json1_1CreateNamespaceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.CreateNamespace",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateNamespaceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateNamespaceCommand = serializeAws_json1_1CreateNamespaceCommand;
const serializeAws_json1_1CreateSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.CreateSnapshot",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateSnapshotCommand = serializeAws_json1_1CreateSnapshotCommand;
const serializeAws_json1_1CreateUsageLimitCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.CreateUsageLimit",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateUsageLimitRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateUsageLimitCommand = serializeAws_json1_1CreateUsageLimitCommand;
const serializeAws_json1_1CreateWorkgroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.CreateWorkgroup",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateWorkgroupRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateWorkgroupCommand = serializeAws_json1_1CreateWorkgroupCommand;
const serializeAws_json1_1DeleteEndpointAccessCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.DeleteEndpointAccess",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteEndpointAccessRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteEndpointAccessCommand = serializeAws_json1_1DeleteEndpointAccessCommand;
const serializeAws_json1_1DeleteNamespaceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.DeleteNamespace",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteNamespaceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteNamespaceCommand = serializeAws_json1_1DeleteNamespaceCommand;
const serializeAws_json1_1DeleteResourcePolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.DeleteResourcePolicy",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteResourcePolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteResourcePolicyCommand = serializeAws_json1_1DeleteResourcePolicyCommand;
const serializeAws_json1_1DeleteSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.DeleteSnapshot",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteSnapshotCommand = serializeAws_json1_1DeleteSnapshotCommand;
const serializeAws_json1_1DeleteUsageLimitCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.DeleteUsageLimit",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteUsageLimitRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteUsageLimitCommand = serializeAws_json1_1DeleteUsageLimitCommand;
const serializeAws_json1_1DeleteWorkgroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.DeleteWorkgroup",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteWorkgroupRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteWorkgroupCommand = serializeAws_json1_1DeleteWorkgroupCommand;
const serializeAws_json1_1GetCredentialsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.GetCredentials",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetCredentialsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetCredentialsCommand = serializeAws_json1_1GetCredentialsCommand;
const serializeAws_json1_1GetEndpointAccessCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.GetEndpointAccess",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetEndpointAccessRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetEndpointAccessCommand = serializeAws_json1_1GetEndpointAccessCommand;
const serializeAws_json1_1GetNamespaceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.GetNamespace",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetNamespaceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetNamespaceCommand = serializeAws_json1_1GetNamespaceCommand;
const serializeAws_json1_1GetRecoveryPointCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.GetRecoveryPoint",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetRecoveryPointRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetRecoveryPointCommand = serializeAws_json1_1GetRecoveryPointCommand;
const serializeAws_json1_1GetResourcePolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.GetResourcePolicy",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetResourcePolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetResourcePolicyCommand = serializeAws_json1_1GetResourcePolicyCommand;
const serializeAws_json1_1GetSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.GetSnapshot",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetSnapshotCommand = serializeAws_json1_1GetSnapshotCommand;
const serializeAws_json1_1GetUsageLimitCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.GetUsageLimit",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetUsageLimitRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetUsageLimitCommand = serializeAws_json1_1GetUsageLimitCommand;
const serializeAws_json1_1GetWorkgroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.GetWorkgroup",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetWorkgroupRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetWorkgroupCommand = serializeAws_json1_1GetWorkgroupCommand;
const serializeAws_json1_1ListEndpointAccessCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.ListEndpointAccess",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListEndpointAccessRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListEndpointAccessCommand = serializeAws_json1_1ListEndpointAccessCommand;
const serializeAws_json1_1ListNamespacesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.ListNamespaces",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListNamespacesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListNamespacesCommand = serializeAws_json1_1ListNamespacesCommand;
const serializeAws_json1_1ListRecoveryPointsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.ListRecoveryPoints",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListRecoveryPointsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListRecoveryPointsCommand = serializeAws_json1_1ListRecoveryPointsCommand;
const serializeAws_json1_1ListSnapshotsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.ListSnapshots",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListSnapshotsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListSnapshotsCommand = serializeAws_json1_1ListSnapshotsCommand;
const serializeAws_json1_1ListTagsForResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.ListTagsForResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTagsForResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListTagsForResourceCommand = serializeAws_json1_1ListTagsForResourceCommand;
const serializeAws_json1_1ListUsageLimitsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.ListUsageLimits",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListUsageLimitsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListUsageLimitsCommand = serializeAws_json1_1ListUsageLimitsCommand;
const serializeAws_json1_1ListWorkgroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.ListWorkgroups",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListWorkgroupsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListWorkgroupsCommand = serializeAws_json1_1ListWorkgroupsCommand;
const serializeAws_json1_1PutResourcePolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.PutResourcePolicy",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutResourcePolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1PutResourcePolicyCommand = serializeAws_json1_1PutResourcePolicyCommand;
const serializeAws_json1_1RestoreFromRecoveryPointCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.RestoreFromRecoveryPoint",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1RestoreFromRecoveryPointRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1RestoreFromRecoveryPointCommand = serializeAws_json1_1RestoreFromRecoveryPointCommand;
const serializeAws_json1_1RestoreFromSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.RestoreFromSnapshot",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1RestoreFromSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1RestoreFromSnapshotCommand = serializeAws_json1_1RestoreFromSnapshotCommand;
const serializeAws_json1_1TagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.TagResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1TagResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1TagResourceCommand = serializeAws_json1_1TagResourceCommand;
const serializeAws_json1_1UntagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.UntagResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UntagResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UntagResourceCommand = serializeAws_json1_1UntagResourceCommand;
const serializeAws_json1_1UpdateEndpointAccessCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.UpdateEndpointAccess",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateEndpointAccessRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateEndpointAccessCommand = serializeAws_json1_1UpdateEndpointAccessCommand;
const serializeAws_json1_1UpdateNamespaceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.UpdateNamespace",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateNamespaceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateNamespaceCommand = serializeAws_json1_1UpdateNamespaceCommand;
const serializeAws_json1_1UpdateSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.UpdateSnapshot",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateSnapshotCommand = serializeAws_json1_1UpdateSnapshotCommand;
const serializeAws_json1_1UpdateUsageLimitCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.UpdateUsageLimit",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateUsageLimitRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateUsageLimitCommand = serializeAws_json1_1UpdateUsageLimitCommand;
const serializeAws_json1_1UpdateWorkgroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "RedshiftServerless.UpdateWorkgroup",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateWorkgroupRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateWorkgroupCommand = serializeAws_json1_1UpdateWorkgroupCommand;
const deserializeAws_json1_1ConvertRecoveryPointToSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ConvertRecoveryPointToSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ConvertRecoveryPointToSnapshotResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ConvertRecoveryPointToSnapshotCommand = deserializeAws_json1_1ConvertRecoveryPointToSnapshotCommand;
const deserializeAws_json1_1ConvertRecoveryPointToSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.redshiftserverless#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1CreateEndpointAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateEndpointAccessCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateEndpointAccessResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateEndpointAccessCommand = deserializeAws_json1_1CreateEndpointAccessCommand;
const deserializeAws_json1_1CreateEndpointAccessCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.redshiftserverless#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.redshiftserverless#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1CreateNamespaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateNamespaceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateNamespaceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateNamespaceCommand = deserializeAws_json1_1CreateNamespaceCommand;
const deserializeAws_json1_1CreateNamespaceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.redshiftserverless#TooManyTagsException":
            throw await deserializeAws_json1_1TooManyTagsExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1CreateSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateSnapshotResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateSnapshotCommand = deserializeAws_json1_1CreateSnapshotCommand;
const deserializeAws_json1_1CreateSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.redshiftserverless#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1CreateUsageLimitCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateUsageLimitCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateUsageLimitResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateUsageLimitCommand = deserializeAws_json1_1CreateUsageLimitCommand;
const deserializeAws_json1_1CreateUsageLimitCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.redshiftserverless#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1CreateWorkgroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateWorkgroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateWorkgroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateWorkgroupCommand = deserializeAws_json1_1CreateWorkgroupCommand;
const deserializeAws_json1_1CreateWorkgroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InsufficientCapacityException":
        case "com.amazonaws.redshiftserverless#InsufficientCapacityException":
            throw await deserializeAws_json1_1InsufficientCapacityExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.redshiftserverless#TooManyTagsException":
            throw await deserializeAws_json1_1TooManyTagsExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DeleteEndpointAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteEndpointAccessCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteEndpointAccessResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteEndpointAccessCommand = deserializeAws_json1_1DeleteEndpointAccessCommand;
const deserializeAws_json1_1DeleteEndpointAccessCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DeleteNamespaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteNamespaceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteNamespaceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteNamespaceCommand = deserializeAws_json1_1DeleteNamespaceCommand;
const deserializeAws_json1_1DeleteNamespaceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DeleteResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteResourcePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteResourcePolicyCommand = deserializeAws_json1_1DeleteResourcePolicyCommand;
const deserializeAws_json1_1DeleteResourcePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DeleteSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteSnapshotResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteSnapshotCommand = deserializeAws_json1_1DeleteSnapshotCommand;
const deserializeAws_json1_1DeleteSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DeleteUsageLimitCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteUsageLimitCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteUsageLimitResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteUsageLimitCommand = deserializeAws_json1_1DeleteUsageLimitCommand;
const deserializeAws_json1_1DeleteUsageLimitCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DeleteWorkgroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteWorkgroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteWorkgroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteWorkgroupCommand = deserializeAws_json1_1DeleteWorkgroupCommand;
const deserializeAws_json1_1DeleteWorkgroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetCredentialsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetCredentialsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetCredentialsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetCredentialsCommand = deserializeAws_json1_1GetCredentialsCommand;
const deserializeAws_json1_1GetCredentialsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetEndpointAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetEndpointAccessCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetEndpointAccessResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetEndpointAccessCommand = deserializeAws_json1_1GetEndpointAccessCommand;
const deserializeAws_json1_1GetEndpointAccessCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetNamespaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetNamespaceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetNamespaceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetNamespaceCommand = deserializeAws_json1_1GetNamespaceCommand;
const deserializeAws_json1_1GetNamespaceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetRecoveryPointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetRecoveryPointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetRecoveryPointResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetRecoveryPointCommand = deserializeAws_json1_1GetRecoveryPointCommand;
const deserializeAws_json1_1GetRecoveryPointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetResourcePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetResourcePolicyCommand = deserializeAws_json1_1GetResourcePolicyCommand;
const deserializeAws_json1_1GetResourcePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetSnapshotResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetSnapshotCommand = deserializeAws_json1_1GetSnapshotCommand;
const deserializeAws_json1_1GetSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetUsageLimitCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetUsageLimitCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetUsageLimitResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetUsageLimitCommand = deserializeAws_json1_1GetUsageLimitCommand;
const deserializeAws_json1_1GetUsageLimitCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1GetWorkgroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetWorkgroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetWorkgroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetWorkgroupCommand = deserializeAws_json1_1GetWorkgroupCommand;
const deserializeAws_json1_1GetWorkgroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListEndpointAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListEndpointAccessCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListEndpointAccessResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListEndpointAccessCommand = deserializeAws_json1_1ListEndpointAccessCommand;
const deserializeAws_json1_1ListEndpointAccessCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListNamespacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListNamespacesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListNamespacesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListNamespacesCommand = deserializeAws_json1_1ListNamespacesCommand;
const deserializeAws_json1_1ListNamespacesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListRecoveryPointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListRecoveryPointsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListRecoveryPointsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListRecoveryPointsCommand = deserializeAws_json1_1ListRecoveryPointsCommand;
const deserializeAws_json1_1ListRecoveryPointsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListSnapshotsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListSnapshotsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListSnapshotsCommand = deserializeAws_json1_1ListSnapshotsCommand;
const deserializeAws_json1_1ListSnapshotsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTagsForResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListTagsForResourceCommand = deserializeAws_json1_1ListTagsForResourceCommand;
const deserializeAws_json1_1ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.redshiftserverless#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListUsageLimitsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListUsageLimitsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListUsageLimitsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListUsageLimitsCommand = deserializeAws_json1_1ListUsageLimitsCommand;
const deserializeAws_json1_1ListUsageLimitsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidPaginationException":
        case "com.amazonaws.redshiftserverless#InvalidPaginationException":
            throw await deserializeAws_json1_1InvalidPaginationExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ListWorkgroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListWorkgroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListWorkgroupsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListWorkgroupsCommand = deserializeAws_json1_1ListWorkgroupsCommand;
const deserializeAws_json1_1ListWorkgroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1PutResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutResourcePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1PutResourcePolicyCommand = deserializeAws_json1_1PutResourcePolicyCommand;
const deserializeAws_json1_1PutResourcePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.redshiftserverless#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1RestoreFromRecoveryPointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1RestoreFromRecoveryPointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1RestoreFromRecoveryPointResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1RestoreFromRecoveryPointCommand = deserializeAws_json1_1RestoreFromRecoveryPointCommand;
const deserializeAws_json1_1RestoreFromRecoveryPointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1RestoreFromSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1RestoreFromSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1RestoreFromSnapshotResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1RestoreFromSnapshotCommand = deserializeAws_json1_1RestoreFromSnapshotCommand;
const deserializeAws_json1_1RestoreFromSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.redshiftserverless#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1TagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1TagResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1TagResourceCommand = deserializeAws_json1_1TagResourceCommand;
const deserializeAws_json1_1TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.redshiftserverless#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.redshiftserverless#TooManyTagsException":
            throw await deserializeAws_json1_1TooManyTagsExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UntagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UntagResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UntagResourceCommand = deserializeAws_json1_1UntagResourceCommand;
const deserializeAws_json1_1UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.redshiftserverless#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1UpdateEndpointAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateEndpointAccessCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateEndpointAccessResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateEndpointAccessCommand = deserializeAws_json1_1UpdateEndpointAccessCommand;
const deserializeAws_json1_1UpdateEndpointAccessCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.redshiftserverless#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1UpdateNamespaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateNamespaceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateNamespaceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateNamespaceCommand = deserializeAws_json1_1UpdateNamespaceCommand;
const deserializeAws_json1_1UpdateNamespaceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1UpdateSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateSnapshotResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateSnapshotCommand = deserializeAws_json1_1UpdateSnapshotCommand;
const deserializeAws_json1_1UpdateSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1UpdateUsageLimitCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateUsageLimitCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateUsageLimitResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateUsageLimitCommand = deserializeAws_json1_1UpdateUsageLimitCommand;
const deserializeAws_json1_1UpdateUsageLimitCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1UpdateWorkgroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateWorkgroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateWorkgroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateWorkgroupCommand = deserializeAws_json1_1UpdateWorkgroupCommand;
const deserializeAws_json1_1UpdateWorkgroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.redshiftserverless#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InsufficientCapacityException":
        case "com.amazonaws.redshiftserverless#InsufficientCapacityException":
            throw await deserializeAws_json1_1InsufficientCapacityExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.redshiftserverless#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.redshiftserverless#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.redshiftserverless#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RedshiftServerlessServiceException_1.RedshiftServerlessServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1AccessDeniedExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1AccessDeniedException(body, context);
    const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ConflictExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ConflictException(body, context);
    const exception = new models_0_1.ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1InsufficientCapacityExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InsufficientCapacityException(body, context);
    const exception = new models_0_1.InsufficientCapacityException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1InternalServerExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InternalServerException(body, context);
    const exception = new models_0_1.InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1InvalidPaginationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidPaginationException(body, context);
    const exception = new models_0_1.InvalidPaginationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
    const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ServiceQuotaExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ServiceQuotaExceededException(body, context);
    const exception = new models_0_1.ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ThrottlingExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ThrottlingException(body, context);
    const exception = new models_0_1.ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1TooManyTagsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1TooManyTagsException(body, context);
    const exception = new models_0_1.TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ValidationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ValidationException(body, context);
    const exception = new models_0_1.ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const serializeAws_json1_1ConfigParameter = (input, context) => {
    return {
        ...(input.parameterKey != null && { parameterKey: input.parameterKey }),
        ...(input.parameterValue != null && { parameterValue: input.parameterValue }),
    };
};
const serializeAws_json1_1ConfigParameterList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1ConfigParameter(entry, context);
    });
};
const serializeAws_json1_1ConvertRecoveryPointToSnapshotRequest = (input, context) => {
    return {
        ...(input.recoveryPointId != null && { recoveryPointId: input.recoveryPointId }),
        ...(input.retentionPeriod != null && { retentionPeriod: input.retentionPeriod }),
        ...(input.snapshotName != null && { snapshotName: input.snapshotName }),
    };
};
const serializeAws_json1_1CreateEndpointAccessRequest = (input, context) => {
    return {
        ...(input.endpointName != null && { endpointName: input.endpointName }),
        ...(input.subnetIds != null && { subnetIds: serializeAws_json1_1SubnetIdList(input.subnetIds, context) }),
        ...(input.vpcSecurityGroupIds != null && {
            vpcSecurityGroupIds: serializeAws_json1_1VpcSecurityGroupIdList(input.vpcSecurityGroupIds, context),
        }),
        ...(input.workgroupName != null && { workgroupName: input.workgroupName }),
    };
};
const serializeAws_json1_1CreateNamespaceRequest = (input, context) => {
    return {
        ...(input.adminUserPassword != null && { adminUserPassword: input.adminUserPassword }),
        ...(input.adminUsername != null && { adminUsername: input.adminUsername }),
        ...(input.dbName != null && { dbName: input.dbName }),
        ...(input.defaultIamRoleArn != null && { defaultIamRoleArn: input.defaultIamRoleArn }),
        ...(input.iamRoles != null && { iamRoles: serializeAws_json1_1IamRoleArnList(input.iamRoles, context) }),
        ...(input.kmsKeyId != null && { kmsKeyId: input.kmsKeyId }),
        ...(input.logExports != null && { logExports: serializeAws_json1_1LogExportList(input.logExports, context) }),
        ...(input.namespaceName != null && { namespaceName: input.namespaceName }),
        ...(input.tags != null && { tags: serializeAws_json1_1TagList(input.tags, context) }),
    };
};
const serializeAws_json1_1CreateSnapshotRequest = (input, context) => {
    return {
        ...(input.namespaceName != null && { namespaceName: input.namespaceName }),
        ...(input.retentionPeriod != null && { retentionPeriod: input.retentionPeriod }),
        ...(input.snapshotName != null && { snapshotName: input.snapshotName }),
    };
};
const serializeAws_json1_1CreateUsageLimitRequest = (input, context) => {
    return {
        ...(input.amount != null && { amount: input.amount }),
        ...(input.breachAction != null && { breachAction: input.breachAction }),
        ...(input.period != null && { period: input.period }),
        ...(input.resourceArn != null && { resourceArn: input.resourceArn }),
        ...(input.usageType != null && { usageType: input.usageType }),
    };
};
const serializeAws_json1_1CreateWorkgroupRequest = (input, context) => {
    return {
        ...(input.baseCapacity != null && { baseCapacity: input.baseCapacity }),
        ...(input.configParameters != null && {
            configParameters: serializeAws_json1_1ConfigParameterList(input.configParameters, context),
        }),
        ...(input.enhancedVpcRouting != null && { enhancedVpcRouting: input.enhancedVpcRouting }),
        ...(input.namespaceName != null && { namespaceName: input.namespaceName }),
        ...(input.publiclyAccessible != null && { publiclyAccessible: input.publiclyAccessible }),
        ...(input.securityGroupIds != null && {
            securityGroupIds: serializeAws_json1_1SecurityGroupIdList(input.securityGroupIds, context),
        }),
        ...(input.subnetIds != null && { subnetIds: serializeAws_json1_1SubnetIdList(input.subnetIds, context) }),
        ...(input.tags != null && { tags: serializeAws_json1_1TagList(input.tags, context) }),
        ...(input.workgroupName != null && { workgroupName: input.workgroupName }),
    };
};
const serializeAws_json1_1DeleteEndpointAccessRequest = (input, context) => {
    return {
        ...(input.endpointName != null && { endpointName: input.endpointName }),
    };
};
const serializeAws_json1_1DeleteNamespaceRequest = (input, context) => {
    return {
        ...(input.finalSnapshotName != null && { finalSnapshotName: input.finalSnapshotName }),
        ...(input.finalSnapshotRetentionPeriod != null && {
            finalSnapshotRetentionPeriod: input.finalSnapshotRetentionPeriod,
        }),
        ...(input.namespaceName != null && { namespaceName: input.namespaceName }),
    };
};
const serializeAws_json1_1DeleteResourcePolicyRequest = (input, context) => {
    return {
        ...(input.resourceArn != null && { resourceArn: input.resourceArn }),
    };
};
const serializeAws_json1_1DeleteSnapshotRequest = (input, context) => {
    return {
        ...(input.snapshotName != null && { snapshotName: input.snapshotName }),
    };
};
const serializeAws_json1_1DeleteUsageLimitRequest = (input, context) => {
    return {
        ...(input.usageLimitId != null && { usageLimitId: input.usageLimitId }),
    };
};
const serializeAws_json1_1DeleteWorkgroupRequest = (input, context) => {
    return {
        ...(input.workgroupName != null && { workgroupName: input.workgroupName }),
    };
};
const serializeAws_json1_1GetCredentialsRequest = (input, context) => {
    return {
        ...(input.dbName != null && { dbName: input.dbName }),
        ...(input.durationSeconds != null && { durationSeconds: input.durationSeconds }),
        ...(input.workgroupName != null && { workgroupName: input.workgroupName }),
    };
};
const serializeAws_json1_1GetEndpointAccessRequest = (input, context) => {
    return {
        ...(input.endpointName != null && { endpointName: input.endpointName }),
    };
};
const serializeAws_json1_1GetNamespaceRequest = (input, context) => {
    return {
        ...(input.namespaceName != null && { namespaceName: input.namespaceName }),
    };
};
const serializeAws_json1_1GetRecoveryPointRequest = (input, context) => {
    return {
        ...(input.recoveryPointId != null && { recoveryPointId: input.recoveryPointId }),
    };
};
const serializeAws_json1_1GetResourcePolicyRequest = (input, context) => {
    return {
        ...(input.resourceArn != null && { resourceArn: input.resourceArn }),
    };
};
const serializeAws_json1_1GetSnapshotRequest = (input, context) => {
    return {
        ...(input.ownerAccount != null && { ownerAccount: input.ownerAccount }),
        ...(input.snapshotArn != null && { snapshotArn: input.snapshotArn }),
        ...(input.snapshotName != null && { snapshotName: input.snapshotName }),
    };
};
const serializeAws_json1_1GetUsageLimitRequest = (input, context) => {
    return {
        ...(input.usageLimitId != null && { usageLimitId: input.usageLimitId }),
    };
};
const serializeAws_json1_1GetWorkgroupRequest = (input, context) => {
    return {
        ...(input.workgroupName != null && { workgroupName: input.workgroupName }),
    };
};
const serializeAws_json1_1IamRoleArnList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ListEndpointAccessRequest = (input, context) => {
    return {
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.vpcId != null && { vpcId: input.vpcId }),
        ...(input.workgroupName != null && { workgroupName: input.workgroupName }),
    };
};
const serializeAws_json1_1ListNamespacesRequest = (input, context) => {
    return {
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
    };
};
const serializeAws_json1_1ListRecoveryPointsRequest = (input, context) => {
    return {
        ...(input.endTime != null && { endTime: Math.round(input.endTime.getTime() / 1000) }),
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.namespaceName != null && { namespaceName: input.namespaceName }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.startTime != null && { startTime: Math.round(input.startTime.getTime() / 1000) }),
    };
};
const serializeAws_json1_1ListSnapshotsRequest = (input, context) => {
    return {
        ...(input.endTime != null && { endTime: Math.round(input.endTime.getTime() / 1000) }),
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.namespaceArn != null && { namespaceArn: input.namespaceArn }),
        ...(input.namespaceName != null && { namespaceName: input.namespaceName }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.ownerAccount != null && { ownerAccount: input.ownerAccount }),
        ...(input.startTime != null && { startTime: Math.round(input.startTime.getTime() / 1000) }),
    };
};
const serializeAws_json1_1ListTagsForResourceRequest = (input, context) => {
    return {
        ...(input.resourceArn != null && { resourceArn: input.resourceArn }),
    };
};
const serializeAws_json1_1ListUsageLimitsRequest = (input, context) => {
    return {
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.resourceArn != null && { resourceArn: input.resourceArn }),
        ...(input.usageType != null && { usageType: input.usageType }),
    };
};
const serializeAws_json1_1ListWorkgroupsRequest = (input, context) => {
    return {
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
    };
};
const serializeAws_json1_1LogExportList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1PutResourcePolicyRequest = (input, context) => {
    return {
        ...(input.policy != null && { policy: input.policy }),
        ...(input.resourceArn != null && { resourceArn: input.resourceArn }),
    };
};
const serializeAws_json1_1RestoreFromRecoveryPointRequest = (input, context) => {
    return {
        ...(input.namespaceName != null && { namespaceName: input.namespaceName }),
        ...(input.recoveryPointId != null && { recoveryPointId: input.recoveryPointId }),
        ...(input.workgroupName != null && { workgroupName: input.workgroupName }),
    };
};
const serializeAws_json1_1RestoreFromSnapshotRequest = (input, context) => {
    return {
        ...(input.namespaceName != null && { namespaceName: input.namespaceName }),
        ...(input.ownerAccount != null && { ownerAccount: input.ownerAccount }),
        ...(input.snapshotArn != null && { snapshotArn: input.snapshotArn }),
        ...(input.snapshotName != null && { snapshotName: input.snapshotName }),
        ...(input.workgroupName != null && { workgroupName: input.workgroupName }),
    };
};
const serializeAws_json1_1SecurityGroupIdList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1SubnetIdList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1Tag = (input, context) => {
    return {
        ...(input.key != null && { key: input.key }),
        ...(input.value != null && { value: input.value }),
    };
};
const serializeAws_json1_1TagKeyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1TagList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1Tag(entry, context);
    });
};
const serializeAws_json1_1TagResourceRequest = (input, context) => {
    return {
        ...(input.resourceArn != null && { resourceArn: input.resourceArn }),
        ...(input.tags != null && { tags: serializeAws_json1_1TagList(input.tags, context) }),
    };
};
const serializeAws_json1_1UntagResourceRequest = (input, context) => {
    return {
        ...(input.resourceArn != null && { resourceArn: input.resourceArn }),
        ...(input.tagKeys != null && { tagKeys: serializeAws_json1_1TagKeyList(input.tagKeys, context) }),
    };
};
const serializeAws_json1_1UpdateEndpointAccessRequest = (input, context) => {
    return {
        ...(input.endpointName != null && { endpointName: input.endpointName }),
        ...(input.vpcSecurityGroupIds != null && {
            vpcSecurityGroupIds: serializeAws_json1_1VpcSecurityGroupIdList(input.vpcSecurityGroupIds, context),
        }),
    };
};
const serializeAws_json1_1UpdateNamespaceRequest = (input, context) => {
    return {
        ...(input.adminUserPassword != null && { adminUserPassword: input.adminUserPassword }),
        ...(input.adminUsername != null && { adminUsername: input.adminUsername }),
        ...(input.defaultIamRoleArn != null && { defaultIamRoleArn: input.defaultIamRoleArn }),
        ...(input.iamRoles != null && { iamRoles: serializeAws_json1_1IamRoleArnList(input.iamRoles, context) }),
        ...(input.kmsKeyId != null && { kmsKeyId: input.kmsKeyId }),
        ...(input.logExports != null && { logExports: serializeAws_json1_1LogExportList(input.logExports, context) }),
        ...(input.namespaceName != null && { namespaceName: input.namespaceName }),
    };
};
const serializeAws_json1_1UpdateSnapshotRequest = (input, context) => {
    return {
        ...(input.retentionPeriod != null && { retentionPeriod: input.retentionPeriod }),
        ...(input.snapshotName != null && { snapshotName: input.snapshotName }),
    };
};
const serializeAws_json1_1UpdateUsageLimitRequest = (input, context) => {
    return {
        ...(input.amount != null && { amount: input.amount }),
        ...(input.breachAction != null && { breachAction: input.breachAction }),
        ...(input.usageLimitId != null && { usageLimitId: input.usageLimitId }),
    };
};
const serializeAws_json1_1UpdateWorkgroupRequest = (input, context) => {
    return {
        ...(input.baseCapacity != null && { baseCapacity: input.baseCapacity }),
        ...(input.configParameters != null && {
            configParameters: serializeAws_json1_1ConfigParameterList(input.configParameters, context),
        }),
        ...(input.enhancedVpcRouting != null && { enhancedVpcRouting: input.enhancedVpcRouting }),
        ...(input.publiclyAccessible != null && { publiclyAccessible: input.publiclyAccessible }),
        ...(input.securityGroupIds != null && {
            securityGroupIds: serializeAws_json1_1SecurityGroupIdList(input.securityGroupIds, context),
        }),
        ...(input.subnetIds != null && { subnetIds: serializeAws_json1_1SubnetIdList(input.subnetIds, context) }),
        ...(input.workgroupName != null && { workgroupName: input.workgroupName }),
    };
};
const serializeAws_json1_1VpcSecurityGroupIdList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const deserializeAws_json1_1AccessDeniedException = (output, context) => {
    return {
        code: (0, smithy_client_1.expectString)(output.code),
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1AccountIdList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ConfigParameter = (output, context) => {
    return {
        parameterKey: (0, smithy_client_1.expectString)(output.parameterKey),
        parameterValue: (0, smithy_client_1.expectString)(output.parameterValue),
    };
};
const deserializeAws_json1_1ConfigParameterList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ConfigParameter(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ConflictException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1ConvertRecoveryPointToSnapshotResponse = (output, context) => {
    return {
        snapshot: output.snapshot != null ? deserializeAws_json1_1Snapshot(output.snapshot, context) : undefined,
    };
};
const deserializeAws_json1_1CreateEndpointAccessResponse = (output, context) => {
    return {
        endpoint: output.endpoint != null ? deserializeAws_json1_1EndpointAccess(output.endpoint, context) : undefined,
    };
};
const deserializeAws_json1_1CreateNamespaceResponse = (output, context) => {
    return {
        namespace: output.namespace != null ? deserializeAws_json1_1Namespace(output.namespace, context) : undefined,
    };
};
const deserializeAws_json1_1CreateSnapshotResponse = (output, context) => {
    return {
        snapshot: output.snapshot != null ? deserializeAws_json1_1Snapshot(output.snapshot, context) : undefined,
    };
};
const deserializeAws_json1_1CreateUsageLimitResponse = (output, context) => {
    return {
        usageLimit: output.usageLimit != null ? deserializeAws_json1_1UsageLimit(output.usageLimit, context) : undefined,
    };
};
const deserializeAws_json1_1CreateWorkgroupResponse = (output, context) => {
    return {
        workgroup: output.workgroup != null ? deserializeAws_json1_1Workgroup(output.workgroup, context) : undefined,
    };
};
const deserializeAws_json1_1DeleteEndpointAccessResponse = (output, context) => {
    return {
        endpoint: output.endpoint != null ? deserializeAws_json1_1EndpointAccess(output.endpoint, context) : undefined,
    };
};
const deserializeAws_json1_1DeleteNamespaceResponse = (output, context) => {
    return {
        namespace: output.namespace != null ? deserializeAws_json1_1Namespace(output.namespace, context) : undefined,
    };
};
const deserializeAws_json1_1DeleteResourcePolicyResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteSnapshotResponse = (output, context) => {
    return {
        snapshot: output.snapshot != null ? deserializeAws_json1_1Snapshot(output.snapshot, context) : undefined,
    };
};
const deserializeAws_json1_1DeleteUsageLimitResponse = (output, context) => {
    return {
        usageLimit: output.usageLimit != null ? deserializeAws_json1_1UsageLimit(output.usageLimit, context) : undefined,
    };
};
const deserializeAws_json1_1DeleteWorkgroupResponse = (output, context) => {
    return {
        workgroup: output.workgroup != null ? deserializeAws_json1_1Workgroup(output.workgroup, context) : undefined,
    };
};
const deserializeAws_json1_1Endpoint = (output, context) => {
    return {
        address: (0, smithy_client_1.expectString)(output.address),
        port: (0, smithy_client_1.expectInt32)(output.port),
        vpcEndpoints: output.vpcEndpoints != null ? deserializeAws_json1_1VpcEndpointList(output.vpcEndpoints, context) : undefined,
    };
};
const deserializeAws_json1_1EndpointAccess = (output, context) => {
    return {
        address: (0, smithy_client_1.expectString)(output.address),
        endpointArn: (0, smithy_client_1.expectString)(output.endpointArn),
        endpointCreateTime: output.endpointCreateTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output.endpointCreateTime))
            : undefined,
        endpointName: (0, smithy_client_1.expectString)(output.endpointName),
        endpointStatus: (0, smithy_client_1.expectString)(output.endpointStatus),
        port: (0, smithy_client_1.expectInt32)(output.port),
        subnetIds: output.subnetIds != null ? deserializeAws_json1_1SubnetIdList(output.subnetIds, context) : undefined,
        vpcEndpoint: output.vpcEndpoint != null ? deserializeAws_json1_1VpcEndpoint(output.vpcEndpoint, context) : undefined,
        vpcSecurityGroups: output.vpcSecurityGroups != null
            ? deserializeAws_json1_1VpcSecurityGroupMembershipList(output.vpcSecurityGroups, context)
            : undefined,
        workgroupName: (0, smithy_client_1.expectString)(output.workgroupName),
    };
};
const deserializeAws_json1_1EndpointAccessList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1EndpointAccess(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1GetCredentialsResponse = (output, context) => {
    return {
        dbPassword: (0, smithy_client_1.expectString)(output.dbPassword),
        dbUser: (0, smithy_client_1.expectString)(output.dbUser),
        expiration: output.expiration != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.expiration))) : undefined,
        nextRefreshTime: output.nextRefreshTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.nextRefreshTime)))
            : undefined,
    };
};
const deserializeAws_json1_1GetEndpointAccessResponse = (output, context) => {
    return {
        endpoint: output.endpoint != null ? deserializeAws_json1_1EndpointAccess(output.endpoint, context) : undefined,
    };
};
const deserializeAws_json1_1GetNamespaceResponse = (output, context) => {
    return {
        namespace: output.namespace != null ? deserializeAws_json1_1Namespace(output.namespace, context) : undefined,
    };
};
const deserializeAws_json1_1GetRecoveryPointResponse = (output, context) => {
    return {
        recoveryPoint: output.recoveryPoint != null ? deserializeAws_json1_1RecoveryPoint(output.recoveryPoint, context) : undefined,
    };
};
const deserializeAws_json1_1GetResourcePolicyResponse = (output, context) => {
    return {
        resourcePolicy: output.resourcePolicy != null ? deserializeAws_json1_1ResourcePolicy(output.resourcePolicy, context) : undefined,
    };
};
const deserializeAws_json1_1GetSnapshotResponse = (output, context) => {
    return {
        snapshot: output.snapshot != null ? deserializeAws_json1_1Snapshot(output.snapshot, context) : undefined,
    };
};
const deserializeAws_json1_1GetUsageLimitResponse = (output, context) => {
    return {
        usageLimit: output.usageLimit != null ? deserializeAws_json1_1UsageLimit(output.usageLimit, context) : undefined,
    };
};
const deserializeAws_json1_1GetWorkgroupResponse = (output, context) => {
    return {
        workgroup: output.workgroup != null ? deserializeAws_json1_1Workgroup(output.workgroup, context) : undefined,
    };
};
const deserializeAws_json1_1IamRoleArnList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1InsufficientCapacityException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1InternalServerException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1InvalidPaginationException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1ListEndpointAccessResponse = (output, context) => {
    return {
        endpoints: output.endpoints != null ? deserializeAws_json1_1EndpointAccessList(output.endpoints, context) : undefined,
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
    };
};
const deserializeAws_json1_1ListNamespacesResponse = (output, context) => {
    return {
        namespaces: output.namespaces != null ? deserializeAws_json1_1NamespaceList(output.namespaces, context) : undefined,
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
    };
};
const deserializeAws_json1_1ListRecoveryPointsResponse = (output, context) => {
    return {
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
        recoveryPoints: output.recoveryPoints != null
            ? deserializeAws_json1_1RecoveryPointList(output.recoveryPoints, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListSnapshotsResponse = (output, context) => {
    return {
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
        snapshots: output.snapshots != null ? deserializeAws_json1_1SnapshotList(output.snapshots, context) : undefined,
    };
};
const deserializeAws_json1_1ListTagsForResourceResponse = (output, context) => {
    return {
        tags: output.tags != null ? deserializeAws_json1_1TagList(output.tags, context) : undefined,
    };
};
const deserializeAws_json1_1ListUsageLimitsResponse = (output, context) => {
    return {
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
        usageLimits: output.usageLimits != null ? deserializeAws_json1_1UsageLimits(output.usageLimits, context) : undefined,
    };
};
const deserializeAws_json1_1ListWorkgroupsResponse = (output, context) => {
    return {
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
        workgroups: output.workgroups != null ? deserializeAws_json1_1WorkgroupList(output.workgroups, context) : undefined,
    };
};
const deserializeAws_json1_1LogExportList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1Namespace = (output, context) => {
    return {
        adminUsername: (0, smithy_client_1.expectString)(output.adminUsername),
        creationDate: output.creationDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output.creationDate)) : undefined,
        dbName: (0, smithy_client_1.expectString)(output.dbName),
        defaultIamRoleArn: (0, smithy_client_1.expectString)(output.defaultIamRoleArn),
        iamRoles: output.iamRoles != null ? deserializeAws_json1_1IamRoleArnList(output.iamRoles, context) : undefined,
        kmsKeyId: (0, smithy_client_1.expectString)(output.kmsKeyId),
        logExports: output.logExports != null ? deserializeAws_json1_1LogExportList(output.logExports, context) : undefined,
        namespaceArn: (0, smithy_client_1.expectString)(output.namespaceArn),
        namespaceId: (0, smithy_client_1.expectString)(output.namespaceId),
        namespaceName: (0, smithy_client_1.expectString)(output.namespaceName),
        status: (0, smithy_client_1.expectString)(output.status),
    };
};
const deserializeAws_json1_1NamespaceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Namespace(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1NetworkInterface = (output, context) => {
    return {
        availabilityZone: (0, smithy_client_1.expectString)(output.availabilityZone),
        networkInterfaceId: (0, smithy_client_1.expectString)(output.networkInterfaceId),
        privateIpAddress: (0, smithy_client_1.expectString)(output.privateIpAddress),
        subnetId: (0, smithy_client_1.expectString)(output.subnetId),
    };
};
const deserializeAws_json1_1NetworkInterfaceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1NetworkInterface(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1PutResourcePolicyResponse = (output, context) => {
    return {
        resourcePolicy: output.resourcePolicy != null ? deserializeAws_json1_1ResourcePolicy(output.resourcePolicy, context) : undefined,
    };
};
const deserializeAws_json1_1RecoveryPoint = (output, context) => {
    return {
        namespaceName: (0, smithy_client_1.expectString)(output.namespaceName),
        recoveryPointCreateTime: output.recoveryPointCreateTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output.recoveryPointCreateTime))
            : undefined,
        recoveryPointId: (0, smithy_client_1.expectString)(output.recoveryPointId),
        totalSizeInMegaBytes: (0, smithy_client_1.limitedParseDouble)(output.totalSizeInMegaBytes),
        workgroupName: (0, smithy_client_1.expectString)(output.workgroupName),
    };
};
const deserializeAws_json1_1RecoveryPointList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RecoveryPoint(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ResourceNotFoundException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
        resourceName: (0, smithy_client_1.expectString)(output.resourceName),
    };
};
const deserializeAws_json1_1ResourcePolicy = (output, context) => {
    return {
        policy: (0, smithy_client_1.expectString)(output.policy),
        resourceArn: (0, smithy_client_1.expectString)(output.resourceArn),
    };
};
const deserializeAws_json1_1RestoreFromRecoveryPointResponse = (output, context) => {
    return {
        namespace: output.namespace != null ? deserializeAws_json1_1Namespace(output.namespace, context) : undefined,
        recoveryPointId: (0, smithy_client_1.expectString)(output.recoveryPointId),
    };
};
const deserializeAws_json1_1RestoreFromSnapshotResponse = (output, context) => {
    return {
        namespace: output.namespace != null ? deserializeAws_json1_1Namespace(output.namespace, context) : undefined,
        ownerAccount: (0, smithy_client_1.expectString)(output.ownerAccount),
        snapshotName: (0, smithy_client_1.expectString)(output.snapshotName),
    };
};
const deserializeAws_json1_1SecurityGroupIdList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ServiceQuotaExceededException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1Snapshot = (output, context) => {
    return {
        accountsWithProvisionedRestoreAccess: output.accountsWithProvisionedRestoreAccess != null
            ? deserializeAws_json1_1AccountIdList(output.accountsWithProvisionedRestoreAccess, context)
            : undefined,
        accountsWithRestoreAccess: output.accountsWithRestoreAccess != null
            ? deserializeAws_json1_1AccountIdList(output.accountsWithRestoreAccess, context)
            : undefined,
        actualIncrementalBackupSizeInMegaBytes: (0, smithy_client_1.limitedParseDouble)(output.actualIncrementalBackupSizeInMegaBytes),
        adminUsername: (0, smithy_client_1.expectString)(output.adminUsername),
        backupProgressInMegaBytes: (0, smithy_client_1.limitedParseDouble)(output.backupProgressInMegaBytes),
        currentBackupRateInMegaBytesPerSecond: (0, smithy_client_1.limitedParseDouble)(output.currentBackupRateInMegaBytesPerSecond),
        elapsedTimeInSeconds: (0, smithy_client_1.expectLong)(output.elapsedTimeInSeconds),
        estimatedSecondsToCompletion: (0, smithy_client_1.expectLong)(output.estimatedSecondsToCompletion),
        kmsKeyId: (0, smithy_client_1.expectString)(output.kmsKeyId),
        namespaceArn: (0, smithy_client_1.expectString)(output.namespaceArn),
        namespaceName: (0, smithy_client_1.expectString)(output.namespaceName),
        ownerAccount: (0, smithy_client_1.expectString)(output.ownerAccount),
        snapshotArn: (0, smithy_client_1.expectString)(output.snapshotArn),
        snapshotCreateTime: output.snapshotCreateTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output.snapshotCreateTime))
            : undefined,
        snapshotName: (0, smithy_client_1.expectString)(output.snapshotName),
        snapshotRemainingDays: (0, smithy_client_1.expectInt32)(output.snapshotRemainingDays),
        snapshotRetentionPeriod: (0, smithy_client_1.expectInt32)(output.snapshotRetentionPeriod),
        snapshotRetentionStartTime: output.snapshotRetentionStartTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output.snapshotRetentionStartTime))
            : undefined,
        status: (0, smithy_client_1.expectString)(output.status),
        totalBackupSizeInMegaBytes: (0, smithy_client_1.limitedParseDouble)(output.totalBackupSizeInMegaBytes),
    };
};
const deserializeAws_json1_1SnapshotList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Snapshot(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1SubnetIdList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1Tag = (output, context) => {
    return {
        key: (0, smithy_client_1.expectString)(output.key),
        value: (0, smithy_client_1.expectString)(output.value),
    };
};
const deserializeAws_json1_1TagList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Tag(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1TagResourceResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1ThrottlingException = (output, context) => {
    return {
        code: (0, smithy_client_1.expectString)(output.code),
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1TooManyTagsException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
        resourceName: (0, smithy_client_1.expectString)(output.resourceName),
    };
};
const deserializeAws_json1_1UntagResourceResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1UpdateEndpointAccessResponse = (output, context) => {
    return {
        endpoint: output.endpoint != null ? deserializeAws_json1_1EndpointAccess(output.endpoint, context) : undefined,
    };
};
const deserializeAws_json1_1UpdateNamespaceResponse = (output, context) => {
    return {
        namespace: output.namespace != null ? deserializeAws_json1_1Namespace(output.namespace, context) : undefined,
    };
};
const deserializeAws_json1_1UpdateSnapshotResponse = (output, context) => {
    return {
        snapshot: output.snapshot != null ? deserializeAws_json1_1Snapshot(output.snapshot, context) : undefined,
    };
};
const deserializeAws_json1_1UpdateUsageLimitResponse = (output, context) => {
    return {
        usageLimit: output.usageLimit != null ? deserializeAws_json1_1UsageLimit(output.usageLimit, context) : undefined,
    };
};
const deserializeAws_json1_1UpdateWorkgroupResponse = (output, context) => {
    return {
        workgroup: output.workgroup != null ? deserializeAws_json1_1Workgroup(output.workgroup, context) : undefined,
    };
};
const deserializeAws_json1_1UsageLimit = (output, context) => {
    return {
        amount: (0, smithy_client_1.expectLong)(output.amount),
        breachAction: (0, smithy_client_1.expectString)(output.breachAction),
        period: (0, smithy_client_1.expectString)(output.period),
        resourceArn: (0, smithy_client_1.expectString)(output.resourceArn),
        usageLimitArn: (0, smithy_client_1.expectString)(output.usageLimitArn),
        usageLimitId: (0, smithy_client_1.expectString)(output.usageLimitId),
        usageType: (0, smithy_client_1.expectString)(output.usageType),
    };
};
const deserializeAws_json1_1UsageLimits = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1UsageLimit(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ValidationException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1VpcEndpoint = (output, context) => {
    return {
        networkInterfaces: output.networkInterfaces != null
            ? deserializeAws_json1_1NetworkInterfaceList(output.networkInterfaces, context)
            : undefined,
        vpcEndpointId: (0, smithy_client_1.expectString)(output.vpcEndpointId),
        vpcId: (0, smithy_client_1.expectString)(output.vpcId),
    };
};
const deserializeAws_json1_1VpcEndpointList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1VpcEndpoint(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1VpcSecurityGroupMembership = (output, context) => {
    return {
        status: (0, smithy_client_1.expectString)(output.status),
        vpcSecurityGroupId: (0, smithy_client_1.expectString)(output.vpcSecurityGroupId),
    };
};
const deserializeAws_json1_1VpcSecurityGroupMembershipList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1VpcSecurityGroupMembership(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Workgroup = (output, context) => {
    return {
        baseCapacity: (0, smithy_client_1.expectInt32)(output.baseCapacity),
        configParameters: output.configParameters != null
            ? deserializeAws_json1_1ConfigParameterList(output.configParameters, context)
            : undefined,
        creationDate: output.creationDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output.creationDate)) : undefined,
        endpoint: output.endpoint != null ? deserializeAws_json1_1Endpoint(output.endpoint, context) : undefined,
        enhancedVpcRouting: (0, smithy_client_1.expectBoolean)(output.enhancedVpcRouting),
        namespaceName: (0, smithy_client_1.expectString)(output.namespaceName),
        publiclyAccessible: (0, smithy_client_1.expectBoolean)(output.publiclyAccessible),
        securityGroupIds: output.securityGroupIds != null
            ? deserializeAws_json1_1SecurityGroupIdList(output.securityGroupIds, context)
            : undefined,
        status: (0, smithy_client_1.expectString)(output.status),
        subnetIds: output.subnetIds != null ? deserializeAws_json1_1SubnetIdList(output.subnetIds, context) : undefined,
        workgroupArn: (0, smithy_client_1.expectString)(output.workgroupArn),
        workgroupId: (0, smithy_client_1.expectString)(output.workgroupId),
        workgroupName: (0, smithy_client_1.expectString)(output.workgroupName),
    };
};
const deserializeAws_json1_1WorkgroupList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Workgroup(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
