import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
import { ConvertRecoveryPointToSnapshotCommandInput, ConvertRecoveryPointToSnapshotCommandOutput } from "./commands/ConvertRecoveryPointToSnapshotCommand";
import { CreateEndpointAccessCommandInput, CreateEndpointAccessCommandOutput } from "./commands/CreateEndpointAccessCommand";
import { CreateNamespaceCommandInput, CreateNamespaceCommandOutput } from "./commands/CreateNamespaceCommand";
import { CreateSnapshotCommandInput, CreateSnapshotCommandOutput } from "./commands/CreateSnapshotCommand";
import { CreateUsageLimitCommandInput, CreateUsageLimitCommandOutput } from "./commands/CreateUsageLimitCommand";
import { CreateWorkgroupCommandInput, CreateWorkgroupCommandOutput } from "./commands/CreateWorkgroupCommand";
import { DeleteEndpointAccessCommandInput, DeleteEndpointAccessCommandOutput } from "./commands/DeleteEndpointAccessCommand";
import { DeleteNamespaceCommandInput, DeleteNamespaceCommandOutput } from "./commands/DeleteNamespaceCommand";
import { DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput } from "./commands/DeleteResourcePolicyCommand";
import { DeleteSnapshotCommandInput, DeleteSnapshotCommandOutput } from "./commands/DeleteSnapshotCommand";
import { DeleteUsageLimitCommandInput, DeleteUsageLimitCommandOutput } from "./commands/DeleteUsageLimitCommand";
import { DeleteWorkgroupCommandInput, DeleteWorkgroupCommandOutput } from "./commands/DeleteWorkgroupCommand";
import { GetCredentialsCommandInput, GetCredentialsCommandOutput } from "./commands/GetCredentialsCommand";
import { GetEndpointAccessCommandInput, GetEndpointAccessCommandOutput } from "./commands/GetEndpointAccessCommand";
import { GetNamespaceCommandInput, GetNamespaceCommandOutput } from "./commands/GetNamespaceCommand";
import { GetRecoveryPointCommandInput, GetRecoveryPointCommandOutput } from "./commands/GetRecoveryPointCommand";
import { GetResourcePolicyCommandInput, GetResourcePolicyCommandOutput } from "./commands/GetResourcePolicyCommand";
import { GetSnapshotCommandInput, GetSnapshotCommandOutput } from "./commands/GetSnapshotCommand";
import { GetUsageLimitCommandInput, GetUsageLimitCommandOutput } from "./commands/GetUsageLimitCommand";
import { GetWorkgroupCommandInput, GetWorkgroupCommandOutput } from "./commands/GetWorkgroupCommand";
import { ListEndpointAccessCommandInput, ListEndpointAccessCommandOutput } from "./commands/ListEndpointAccessCommand";
import { ListNamespacesCommandInput, ListNamespacesCommandOutput } from "./commands/ListNamespacesCommand";
import { ListRecoveryPointsCommandInput, ListRecoveryPointsCommandOutput } from "./commands/ListRecoveryPointsCommand";
import { ListSnapshotsCommandInput, ListSnapshotsCommandOutput } from "./commands/ListSnapshotsCommand";
import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "./commands/ListTagsForResourceCommand";
import { ListUsageLimitsCommandInput, ListUsageLimitsCommandOutput } from "./commands/ListUsageLimitsCommand";
import { ListWorkgroupsCommandInput, ListWorkgroupsCommandOutput } from "./commands/ListWorkgroupsCommand";
import { PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput } from "./commands/PutResourcePolicyCommand";
import { RestoreFromRecoveryPointCommandInput, RestoreFromRecoveryPointCommandOutput } from "./commands/RestoreFromRecoveryPointCommand";
import { RestoreFromSnapshotCommandInput, RestoreFromSnapshotCommandOutput } from "./commands/RestoreFromSnapshotCommand";
import { TagResourceCommandInput, TagResourceCommandOutput } from "./commands/TagResourceCommand";
import { UntagResourceCommandInput, UntagResourceCommandOutput } from "./commands/UntagResourceCommand";
import { UpdateEndpointAccessCommandInput, UpdateEndpointAccessCommandOutput } from "./commands/UpdateEndpointAccessCommand";
import { UpdateNamespaceCommandInput, UpdateNamespaceCommandOutput } from "./commands/UpdateNamespaceCommand";
import { UpdateSnapshotCommandInput, UpdateSnapshotCommandOutput } from "./commands/UpdateSnapshotCommand";
import { UpdateUsageLimitCommandInput, UpdateUsageLimitCommandOutput } from "./commands/UpdateUsageLimitCommand";
import { UpdateWorkgroupCommandInput, UpdateWorkgroupCommandOutput } from "./commands/UpdateWorkgroupCommand";
import { RedshiftServerlessClient } from "./RedshiftServerlessClient";
/**
 * <p>This is an interface reference for Amazon Redshift Serverless.
 *            It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift Serverless.
 *         </p>
 *         <p>Amazon Redshift Serverless automatically provisions data warehouse capacity and intelligently scales the
 *            underlying resources based on workload demands. Amazon Redshift Serverless adjusts capacity in seconds to deliver consistently high
 *            performance and simplified operations for even the most demanding and volatile workloads. Amazon Redshift Serverless lets you
 *            focus on using your data to acquire new insights for your business and customers.
 *         </p>
 *         <p>
 *            To learn more about Amazon Redshift Serverless,
 *            see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/serverless-whatis.html">What is Amazon Redshift Serverless</a>.
 *         </p>
 */
export declare class RedshiftServerless extends RedshiftServerlessClient {
    /**
     * <p>Converts a recovery point to a snapshot. For more information about recovery points and snapshots,
     *          see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/serverless-snapshots-recovery.html">Working with snapshots and recovery points</a>.</p>
     */
    convertRecoveryPointToSnapshot(args: ConvertRecoveryPointToSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<ConvertRecoveryPointToSnapshotCommandOutput>;
    convertRecoveryPointToSnapshot(args: ConvertRecoveryPointToSnapshotCommandInput, cb: (err: any, data?: ConvertRecoveryPointToSnapshotCommandOutput) => void): void;
    convertRecoveryPointToSnapshot(args: ConvertRecoveryPointToSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ConvertRecoveryPointToSnapshotCommandOutput) => void): void;
    /**
     * <p>Creates an Amazon Redshift Serverless managed VPC endpoint.</p>
     */
    createEndpointAccess(args: CreateEndpointAccessCommandInput, options?: __HttpHandlerOptions): Promise<CreateEndpointAccessCommandOutput>;
    createEndpointAccess(args: CreateEndpointAccessCommandInput, cb: (err: any, data?: CreateEndpointAccessCommandOutput) => void): void;
    createEndpointAccess(args: CreateEndpointAccessCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEndpointAccessCommandOutput) => void): void;
    /**
     * <p>Creates a namespace in Amazon Redshift Serverless.</p>
     */
    createNamespace(args: CreateNamespaceCommandInput, options?: __HttpHandlerOptions): Promise<CreateNamespaceCommandOutput>;
    createNamespace(args: CreateNamespaceCommandInput, cb: (err: any, data?: CreateNamespaceCommandOutput) => void): void;
    createNamespace(args: CreateNamespaceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateNamespaceCommandOutput) => void): void;
    /**
     * <p>Creates a snapshot of all databases in a namespace.
     *          For more information about snapshots, see
     *          <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/serverless-snapshots-recovery.html">
     *          Working with snapshots and recovery points</a>.</p>
     */
    createSnapshot(args: CreateSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<CreateSnapshotCommandOutput>;
    createSnapshot(args: CreateSnapshotCommandInput, cb: (err: any, data?: CreateSnapshotCommandOutput) => void): void;
    createSnapshot(args: CreateSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSnapshotCommandOutput) => void): void;
    /**
     * <p>Creates a usage limit for a specified Amazon Redshift Serverless usage type. The usage limit is identified by the returned usage limit identifier.
     *       </p>
     */
    createUsageLimit(args: CreateUsageLimitCommandInput, options?: __HttpHandlerOptions): Promise<CreateUsageLimitCommandOutput>;
    createUsageLimit(args: CreateUsageLimitCommandInput, cb: (err: any, data?: CreateUsageLimitCommandOutput) => void): void;
    createUsageLimit(args: CreateUsageLimitCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateUsageLimitCommandOutput) => void): void;
    /**
     * <p>Creates an workgroup in Amazon Redshift Serverless.</p>
     */
    createWorkgroup(args: CreateWorkgroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateWorkgroupCommandOutput>;
    createWorkgroup(args: CreateWorkgroupCommandInput, cb: (err: any, data?: CreateWorkgroupCommandOutput) => void): void;
    createWorkgroup(args: CreateWorkgroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateWorkgroupCommandOutput) => void): void;
    /**
     * <p>Deletes an Amazon Redshift Serverless managed VPC endpoint.</p>
     */
    deleteEndpointAccess(args: DeleteEndpointAccessCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEndpointAccessCommandOutput>;
    deleteEndpointAccess(args: DeleteEndpointAccessCommandInput, cb: (err: any, data?: DeleteEndpointAccessCommandOutput) => void): void;
    deleteEndpointAccess(args: DeleteEndpointAccessCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEndpointAccessCommandOutput) => void): void;
    /**
     * <p>Deletes a namespace from Amazon Redshift Serverless.
     *          Before you delete the namespace, you can create a final snapshot that has all of the data within the namespace.</p>
     */
    deleteNamespace(args: DeleteNamespaceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteNamespaceCommandOutput>;
    deleteNamespace(args: DeleteNamespaceCommandInput, cb: (err: any, data?: DeleteNamespaceCommandOutput) => void): void;
    deleteNamespace(args: DeleteNamespaceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteNamespaceCommandOutput) => void): void;
    /**
     * <p>Deletes the specified resource policy.</p>
     */
    deleteResourcePolicy(args: DeleteResourcePolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteResourcePolicyCommandOutput>;
    deleteResourcePolicy(args: DeleteResourcePolicyCommandInput, cb: (err: any, data?: DeleteResourcePolicyCommandOutput) => void): void;
    deleteResourcePolicy(args: DeleteResourcePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteResourcePolicyCommandOutput) => void): void;
    /**
     * <p>Deletes a snapshot from Amazon Redshift Serverless.</p>
     */
    deleteSnapshot(args: DeleteSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSnapshotCommandOutput>;
    deleteSnapshot(args: DeleteSnapshotCommandInput, cb: (err: any, data?: DeleteSnapshotCommandOutput) => void): void;
    deleteSnapshot(args: DeleteSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSnapshotCommandOutput) => void): void;
    /**
     * <p>Deletes a usage limit from Amazon Redshift Serverless.</p>
     */
    deleteUsageLimit(args: DeleteUsageLimitCommandInput, options?: __HttpHandlerOptions): Promise<DeleteUsageLimitCommandOutput>;
    deleteUsageLimit(args: DeleteUsageLimitCommandInput, cb: (err: any, data?: DeleteUsageLimitCommandOutput) => void): void;
    deleteUsageLimit(args: DeleteUsageLimitCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteUsageLimitCommandOutput) => void): void;
    /**
     * <p>Deletes a workgroup.</p>
     */
    deleteWorkgroup(args: DeleteWorkgroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteWorkgroupCommandOutput>;
    deleteWorkgroup(args: DeleteWorkgroupCommandInput, cb: (err: any, data?: DeleteWorkgroupCommandOutput) => void): void;
    deleteWorkgroup(args: DeleteWorkgroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteWorkgroupCommandOutput) => void): void;
    /**
     * <p>Returns a database user name and temporary password with
     *          temporary authorization to log in to Amazon Redshift Serverless.</p>
     *          <p>By default, the temporary credentials expire in 900 seconds.
     *          You can optionally specify a duration between 900 seconds (15 minutes) and 3600 seconds (60 minutes).</p>
     *
     *          <p>
     *          The Identity and Access Management (IAM) user or role that runs
     *          GetCredentials must have an IAM policy attached that allows access to all
     *          necessary actions and resources.
     *          </p>
     *
     *          <p>
     *          If the <code>DbName</code> parameter is specified, the IAM policy must
     *          allow access to the resource dbname for the specified database name.</p>
     */
    getCredentials(args: GetCredentialsCommandInput, options?: __HttpHandlerOptions): Promise<GetCredentialsCommandOutput>;
    getCredentials(args: GetCredentialsCommandInput, cb: (err: any, data?: GetCredentialsCommandOutput) => void): void;
    getCredentials(args: GetCredentialsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCredentialsCommandOutput) => void): void;
    /**
     * <p>Returns information, such as the name, about a VPC endpoint.</p>
     */
    getEndpointAccess(args: GetEndpointAccessCommandInput, options?: __HttpHandlerOptions): Promise<GetEndpointAccessCommandOutput>;
    getEndpointAccess(args: GetEndpointAccessCommandInput, cb: (err: any, data?: GetEndpointAccessCommandOutput) => void): void;
    getEndpointAccess(args: GetEndpointAccessCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEndpointAccessCommandOutput) => void): void;
    /**
     * <p>Returns information about a namespace in Amazon Redshift Serverless.</p>
     */
    getNamespace(args: GetNamespaceCommandInput, options?: __HttpHandlerOptions): Promise<GetNamespaceCommandOutput>;
    getNamespace(args: GetNamespaceCommandInput, cb: (err: any, data?: GetNamespaceCommandOutput) => void): void;
    getNamespace(args: GetNamespaceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetNamespaceCommandOutput) => void): void;
    /**
     * <p>Returns information about a recovery point.</p>
     */
    getRecoveryPoint(args: GetRecoveryPointCommandInput, options?: __HttpHandlerOptions): Promise<GetRecoveryPointCommandOutput>;
    getRecoveryPoint(args: GetRecoveryPointCommandInput, cb: (err: any, data?: GetRecoveryPointCommandOutput) => void): void;
    getRecoveryPoint(args: GetRecoveryPointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRecoveryPointCommandOutput) => void): void;
    /**
     * <p>Returns a resource policy.</p>
     */
    getResourcePolicy(args: GetResourcePolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetResourcePolicyCommandOutput>;
    getResourcePolicy(args: GetResourcePolicyCommandInput, cb: (err: any, data?: GetResourcePolicyCommandOutput) => void): void;
    getResourcePolicy(args: GetResourcePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetResourcePolicyCommandOutput) => void): void;
    /**
     * <p>Returns information about a specific snapshot.</p>
     */
    getSnapshot(args: GetSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<GetSnapshotCommandOutput>;
    getSnapshot(args: GetSnapshotCommandInput, cb: (err: any, data?: GetSnapshotCommandOutput) => void): void;
    getSnapshot(args: GetSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSnapshotCommandOutput) => void): void;
    /**
     * <p>Returns information about a usage limit.</p>
     */
    getUsageLimit(args: GetUsageLimitCommandInput, options?: __HttpHandlerOptions): Promise<GetUsageLimitCommandOutput>;
    getUsageLimit(args: GetUsageLimitCommandInput, cb: (err: any, data?: GetUsageLimitCommandOutput) => void): void;
    getUsageLimit(args: GetUsageLimitCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetUsageLimitCommandOutput) => void): void;
    /**
     * <p>Returns information about a specific workgroup.</p>
     */
    getWorkgroup(args: GetWorkgroupCommandInput, options?: __HttpHandlerOptions): Promise<GetWorkgroupCommandOutput>;
    getWorkgroup(args: GetWorkgroupCommandInput, cb: (err: any, data?: GetWorkgroupCommandOutput) => void): void;
    getWorkgroup(args: GetWorkgroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetWorkgroupCommandOutput) => void): void;
    /**
     * <p>Returns an array of <code>EndpointAccess</code> objects and relevant information.</p>
     */
    listEndpointAccess(args: ListEndpointAccessCommandInput, options?: __HttpHandlerOptions): Promise<ListEndpointAccessCommandOutput>;
    listEndpointAccess(args: ListEndpointAccessCommandInput, cb: (err: any, data?: ListEndpointAccessCommandOutput) => void): void;
    listEndpointAccess(args: ListEndpointAccessCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEndpointAccessCommandOutput) => void): void;
    /**
     * <p>Returns information about a list of specified namespaces.</p>
     */
    listNamespaces(args: ListNamespacesCommandInput, options?: __HttpHandlerOptions): Promise<ListNamespacesCommandOutput>;
    listNamespaces(args: ListNamespacesCommandInput, cb: (err: any, data?: ListNamespacesCommandOutput) => void): void;
    listNamespaces(args: ListNamespacesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListNamespacesCommandOutput) => void): void;
    /**
     * <p>Returns an array of recovery points.</p>
     */
    listRecoveryPoints(args: ListRecoveryPointsCommandInput, options?: __HttpHandlerOptions): Promise<ListRecoveryPointsCommandOutput>;
    listRecoveryPoints(args: ListRecoveryPointsCommandInput, cb: (err: any, data?: ListRecoveryPointsCommandOutput) => void): void;
    listRecoveryPoints(args: ListRecoveryPointsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRecoveryPointsCommandOutput) => void): void;
    /**
     * <p>Returns a list of snapshots.</p>
     */
    listSnapshots(args: ListSnapshotsCommandInput, options?: __HttpHandlerOptions): Promise<ListSnapshotsCommandOutput>;
    listSnapshots(args: ListSnapshotsCommandInput, cb: (err: any, data?: ListSnapshotsCommandOutput) => void): void;
    listSnapshots(args: ListSnapshotsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSnapshotsCommandOutput) => void): void;
    /**
     * <p>Lists the tags assigned to a resource.</p>
     */
    listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
    listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
    listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
    /**
     * <p>Lists all usage limits within Amazon Redshift Serverless.</p>
     */
    listUsageLimits(args: ListUsageLimitsCommandInput, options?: __HttpHandlerOptions): Promise<ListUsageLimitsCommandOutput>;
    listUsageLimits(args: ListUsageLimitsCommandInput, cb: (err: any, data?: ListUsageLimitsCommandOutput) => void): void;
    listUsageLimits(args: ListUsageLimitsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListUsageLimitsCommandOutput) => void): void;
    /**
     * <p>Returns information about a list of specified workgroups.</p>
     */
    listWorkgroups(args: ListWorkgroupsCommandInput, options?: __HttpHandlerOptions): Promise<ListWorkgroupsCommandOutput>;
    listWorkgroups(args: ListWorkgroupsCommandInput, cb: (err: any, data?: ListWorkgroupsCommandOutput) => void): void;
    listWorkgroups(args: ListWorkgroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListWorkgroupsCommandOutput) => void): void;
    /**
     * <p>Creates or updates a resource policy. Currently, you can use policies to share snapshots across Amazon Web Services accounts.</p>
     */
    putResourcePolicy(args: PutResourcePolicyCommandInput, options?: __HttpHandlerOptions): Promise<PutResourcePolicyCommandOutput>;
    putResourcePolicy(args: PutResourcePolicyCommandInput, cb: (err: any, data?: PutResourcePolicyCommandOutput) => void): void;
    putResourcePolicy(args: PutResourcePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutResourcePolicyCommandOutput) => void): void;
    /**
     * <p>Restore the data from a recovery point.</p>
     */
    restoreFromRecoveryPoint(args: RestoreFromRecoveryPointCommandInput, options?: __HttpHandlerOptions): Promise<RestoreFromRecoveryPointCommandOutput>;
    restoreFromRecoveryPoint(args: RestoreFromRecoveryPointCommandInput, cb: (err: any, data?: RestoreFromRecoveryPointCommandOutput) => void): void;
    restoreFromRecoveryPoint(args: RestoreFromRecoveryPointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RestoreFromRecoveryPointCommandOutput) => void): void;
    /**
     * <p>Restores a namespace from a snapshot.</p>
     */
    restoreFromSnapshot(args: RestoreFromSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<RestoreFromSnapshotCommandOutput>;
    restoreFromSnapshot(args: RestoreFromSnapshotCommandInput, cb: (err: any, data?: RestoreFromSnapshotCommandOutput) => void): void;
    restoreFromSnapshot(args: RestoreFromSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RestoreFromSnapshotCommandOutput) => void): void;
    /**
     * <p>Assigns one or more tags to a resource.</p>
     */
    tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
    tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
    tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
    /**
     * <p>Removes a tag or set of tags from a resource.</p>
     */
    untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
    untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    /**
     * <p>Updates an Amazon Redshift Serverless managed endpoint.</p>
     */
    updateEndpointAccess(args: UpdateEndpointAccessCommandInput, options?: __HttpHandlerOptions): Promise<UpdateEndpointAccessCommandOutput>;
    updateEndpointAccess(args: UpdateEndpointAccessCommandInput, cb: (err: any, data?: UpdateEndpointAccessCommandOutput) => void): void;
    updateEndpointAccess(args: UpdateEndpointAccessCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateEndpointAccessCommandOutput) => void): void;
    /**
     * <p>Updates a namespace with the specified settings.</p>
     */
    updateNamespace(args: UpdateNamespaceCommandInput, options?: __HttpHandlerOptions): Promise<UpdateNamespaceCommandOutput>;
    updateNamespace(args: UpdateNamespaceCommandInput, cb: (err: any, data?: UpdateNamespaceCommandOutput) => void): void;
    updateNamespace(args: UpdateNamespaceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateNamespaceCommandOutput) => void): void;
    /**
     * <p>Updates a snapshot.</p>
     */
    updateSnapshot(args: UpdateSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSnapshotCommandOutput>;
    updateSnapshot(args: UpdateSnapshotCommandInput, cb: (err: any, data?: UpdateSnapshotCommandOutput) => void): void;
    updateSnapshot(args: UpdateSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSnapshotCommandOutput) => void): void;
    /**
     * <p>Update a usage limit in Amazon Redshift Serverless. You can't update the usage type or period of a usage limit.</p>
     */
    updateUsageLimit(args: UpdateUsageLimitCommandInput, options?: __HttpHandlerOptions): Promise<UpdateUsageLimitCommandOutput>;
    updateUsageLimit(args: UpdateUsageLimitCommandInput, cb: (err: any, data?: UpdateUsageLimitCommandOutput) => void): void;
    updateUsageLimit(args: UpdateUsageLimitCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateUsageLimitCommandOutput) => void): void;
    /**
     * <p>Updates a workgroup with the specified configuration settings.</p>
     */
    updateWorkgroup(args: UpdateWorkgroupCommandInput, options?: __HttpHandlerOptions): Promise<UpdateWorkgroupCommandOutput>;
    updateWorkgroup(args: UpdateWorkgroupCommandInput, cb: (err: any, data?: UpdateWorkgroupCommandOutput) => void): void;
    updateWorkgroup(args: UpdateWorkgroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateWorkgroupCommandOutput) => void): void;
}
