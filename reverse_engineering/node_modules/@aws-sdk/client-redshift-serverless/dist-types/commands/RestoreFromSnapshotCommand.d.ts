import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { RestoreFromSnapshotRequest, RestoreFromSnapshotResponse } from "../models/models_0";
import { RedshiftServerlessClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../RedshiftServerlessClient";
export interface RestoreFromSnapshotCommandInput extends RestoreFromSnapshotRequest {
}
export interface RestoreFromSnapshotCommandOutput extends RestoreFromSnapshotResponse, __MetadataBearer {
}
/**
 * <p>Restores a namespace from a snapshot.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { RedshiftServerlessClient, RestoreFromSnapshotCommand } from "@aws-sdk/client-redshift-serverless"; // ES Modules import
 * // const { RedshiftServerlessClient, RestoreFromSnapshotCommand } = require("@aws-sdk/client-redshift-serverless"); // CommonJS import
 * const client = new RedshiftServerlessClient(config);
 * const command = new RestoreFromSnapshotCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link RestoreFromSnapshotCommandInput} for command's `input` shape.
 * @see {@link RestoreFromSnapshotCommandOutput} for command's `response` shape.
 * @see {@link RedshiftServerlessClientResolvedConfig | config} for RedshiftServerlessClient's `config` shape.
 *
 */
export declare class RestoreFromSnapshotCommand extends $Command<RestoreFromSnapshotCommandInput, RestoreFromSnapshotCommandOutput, RedshiftServerlessClientResolvedConfig> {
    readonly input: RestoreFromSnapshotCommandInput;
    constructor(input: RestoreFromSnapshotCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RedshiftServerlessClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RestoreFromSnapshotCommandInput, RestoreFromSnapshotCommandOutput>;
    private serialize;
    private deserialize;
}
