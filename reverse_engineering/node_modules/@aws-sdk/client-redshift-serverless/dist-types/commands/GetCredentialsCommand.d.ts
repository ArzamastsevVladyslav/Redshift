import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { GetCredentialsRequest, GetCredentialsResponse } from "../models/models_0";
import { RedshiftServerlessClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../RedshiftServerlessClient";
export interface GetCredentialsCommandInput extends GetCredentialsRequest {
}
export interface GetCredentialsCommandOutput extends GetCredentialsResponse, __MetadataBearer {
}
/**
 * <p>Returns a database user name and temporary password with
 *          temporary authorization to log in to Amazon Redshift Serverless.</p>
 *          <p>By default, the temporary credentials expire in 900 seconds.
 *          You can optionally specify a duration between 900 seconds (15 minutes) and 3600 seconds (60 minutes).</p>
 *
 *          <p>
 *          The Identity and Access Management (IAM) user or role that runs
 *          GetCredentials must have an IAM policy attached that allows access to all
 *          necessary actions and resources.
 *          </p>
 *
 *          <p>
 *          If the <code>DbName</code> parameter is specified, the IAM policy must
 *          allow access to the resource dbname for the specified database name.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { RedshiftServerlessClient, GetCredentialsCommand } from "@aws-sdk/client-redshift-serverless"; // ES Modules import
 * // const { RedshiftServerlessClient, GetCredentialsCommand } = require("@aws-sdk/client-redshift-serverless"); // CommonJS import
 * const client = new RedshiftServerlessClient(config);
 * const command = new GetCredentialsCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link GetCredentialsCommandInput} for command's `input` shape.
 * @see {@link GetCredentialsCommandOutput} for command's `response` shape.
 * @see {@link RedshiftServerlessClientResolvedConfig | config} for RedshiftServerlessClient's `config` shape.
 *
 */
export declare class GetCredentialsCommand extends $Command<GetCredentialsCommandInput, GetCredentialsCommandOutput, RedshiftServerlessClientResolvedConfig> {
    readonly input: GetCredentialsCommandInput;
    constructor(input: GetCredentialsCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RedshiftServerlessClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCredentialsCommandInput, GetCredentialsCommandOutput>;
    private serialize;
    private deserialize;
}
